{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jackfield Labeler","text":"<p>A professional desktop application for creating custom label strips for 19\" equipment rack jackfields, patch panels, and audio equipment. Designed for audio engineers, broadcast technicians, IT professionals, and lab managers who need clear, professional labels for their equipment.</p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>\ud83c\udfa8 Visual Designer: Intuitive tabbed interface for creating label strips with customizable segments</li> <li>\ud83d\udcc4 PDF Generation: High-quality PDF output with intelligent rotation and precise positioning</li> <li>\ud83d\udcbe Project Management: Save/load functionality with <code>.jlp</code> format for easy project sharing</li> <li>\u2699\ufe0f Advanced Settings: Configurable paper sizes, margins, rotation, and default formatting</li> <li>\ud83c\udfaf Real-time Preview: Live preview of your label design as you make changes</li> <li>\ud83c\udf08 Rich Formatting: Bold, italic text with customizable colors for text and backgrounds</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code># Install dependencies\nuv sync\n\n# Run the application\nuv run -m jackfield_labeler\n</code></pre>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>User Guide: Complete guide to using Jackfield Labeler</li> <li>Development Guide: Information for developers and contributors</li> <li>API Reference: Technical documentation for the codebase</li> <li>Architecture: System design and component overview</li> </ul>"},{"location":"#technical-stack","title":"\ud83d\udee0\ufe0f Technical Stack","text":"<ul> <li>Python 3.12+ with modern type hints</li> <li>PyQt6 for cross-platform GUI</li> <li>ReportLab for professional PDF generation</li> <li>UV for fast dependency management</li> <li>Ruff for code quality and formatting</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! See our Contributing Guide for details on how to get started.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>Made with \u2764\ufe0f for the audio and broadcast community</p>"},{"location":"CONTRIBUTING/","title":"Contributing to <code>jackfield-labeler</code>","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"CONTRIBUTING/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"CONTRIBUTING/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/capp3/jackfield-labeler/issues</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"CONTRIBUTING/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.</p>"},{"location":"CONTRIBUTING/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#write-documentation","title":"Write Documentation","text":"<p>jackfield-labeler could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"CONTRIBUTING/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/capp3/jackfield-labeler/issues.</p> <p>If you are proposing a new feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"CONTRIBUTING/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>jackfield-labeler</code> for local development. Please note this documentation assumes you already have <code>uv</code> and <code>Git</code> installed and ready to go.</p> <ol> <li> <p>Fork the <code>jackfield-labeler</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> </li> </ol> <pre><code>cd &lt;directory_in_which_repo_should_be_created&gt;\ngit clone git@github.com:YOUR_NAME/jackfield-labeler.git\n</code></pre> <ol> <li>Set up the development environment:</li> </ol> <pre><code>cd jackfield-labeler\nmake dev\n</code></pre> <p>This single command will: - Install all dependencies using <code>uv sync</code> - Install pre-commit hooks - Set up your development environment</p> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <ol> <li> <p>Don't forget to add test cases for your added functionality to the <code>tests</code> directory.</p> </li> <li> <p>When you're done making changes, run the quality checks:</p> </li> </ol> <pre><code>make ci\n</code></pre> <p>This will run: - Code quality checks (linting, formatting, type checking) - Tests with coverage - Documentation build verification</p> <ol> <li>For a full development cycle (clean, install, test, build):</li> </ol> <pre><code>make all\n</code></pre> <ol> <li>To run the application locally:</li> </ol> <pre><code>make run\n</code></pre> <ol> <li>To build documentation and serve it locally:</li> </ol> <pre><code>make docs-serve\n</code></pre>"},{"location":"CONTRIBUTING/#development-commands","title":"Development Commands","text":"<p>The project uses a Lean Makefile for all development tasks. Run <code>make help</code> to see all available commands:</p> <ul> <li><code>make dev</code> - Set up development environment</li> <li><code>make check</code> - Run quality checks</li> <li><code>make test</code> - Run tests with coverage</li> <li><code>make test-watch</code> - Run tests in watch mode</li> <li><code>make run</code> - Run the application</li> <li><code>make build</code> - Build wheel distribution</li> <li><code>make build-exe</code> - Build executable (requires PyInstaller)</li> <li><code>make clean</code> - Clean build artifacts</li> <li><code>make docs-build</code> - Build documentation</li> <li><code>make docs-serve</code> - Serve documentation locally</li> <li><code>make docs-check</code> - Check documentation build</li> <li><code>make ci</code> - Run all CI checks locally</li> <li><code>make all</code> - Run full development cycle</li> <li><code>make release VERSION=1.0.0</code> - Create a new release</li> </ul>"},{"location":"CONTRIBUTING/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md with details of changes to the interface, if applicable.</li> <li>Update the documentation in the <code>docs/</code> directory if needed.</li> <li>The PR will be merged once you have the sign-off of at least one other developer.</li> <li>The PR will be automatically tested by GitHub Actions.</li> </ol>"},{"location":"CONTRIBUTING/#code-style","title":"Code Style","text":"<ul> <li>Use <code>ruff</code> for linting and formatting (configured in <code>pyproject.toml</code>)</li> <li>Follow PEP 8 style guidelines</li> <li>Use type hints where appropriate</li> <li>Write docstrings for all public functions and classes</li> <li>Keep functions small and focused</li> <li>Write tests for new functionality</li> </ul>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<ul> <li>Tests are located in the <code>tests/</code> directory</li> <li>Run tests with <code>make test</code></li> <li>Run tests in watch mode with <code>make test-watch</code></li> <li>Ensure all tests pass before submitting a PR</li> <li>Add tests for new functionality</li> </ul>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<ul> <li>Documentation is built with MkDocs</li> <li>Source files are in the <code>docs/</code> directory</li> <li>Build documentation with <code>make docs-build</code></li> <li>Serve documentation locally with <code>make docs-serve</code></li> <li>Check documentation build with <code>make docs-check</code></li> </ul>"},{"location":"CONTRIBUTING/#release-process","title":"Release Process","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Create a release with <code>make release VERSION=x.y.z</code></li> <li>GitHub Actions will automatically build and release executables</li> <li>Documentation will be automatically deployed to GitHub Pages</li> </ol>"},{"location":"activeContext/","title":"Active Context","text":""},{"location":"activeContext/#project-overview","title":"Project Overview","text":"<p>Jackfield Labeler is a feature-complete desktop application for creating and printing custom label strips for audio/video jackfields (patch panels). The application provides a professional interface for designing labels with specific dimensions and segment layouts, then outputs them as high-quality PDF files ready for printing.</p>"},{"location":"activeContext/#current-development-status","title":"Current Development Status","text":"<p>The project has reached beta completion with all core functionality implemented and working. The application is ready for final polish and version 1.0 release.</p>"},{"location":"activeContext/#whats-working","title":"What's Working","text":"<ul> <li>\u2705 Complete GUI with Designer, Settings, and Preview tabs</li> <li>\u2705 Full label strip design capabilities with segment customization</li> <li>\u2705 Professional PDF generation with intelligent rotation</li> <li>\u2705 Project save/load functionality with <code>.jlp</code> format</li> <li>\u2705 Real-time preview and PNG export</li> <li>\u2705 Comprehensive test suite with good coverage</li> </ul>"},{"location":"activeContext/#current-focus-areas","title":"Current Focus Areas","text":"<ul> <li>\ud83d\udfe1 Final UI polish and visual improvements</li> <li>\ud83d\udfe1 Multi-page support for extra-large strips</li> <li>\ud83d\udfe1 Enhanced preview with rotation visualization</li> <li>\u23f3 Version 1.0 release preparation</li> <li>\u23f3 Executable distribution for all platforms</li> </ul>"},{"location":"activeContext/#technical-architecture","title":"Technical Architecture","text":"<p>The project follows a clean Model-View-Controller (MVC) architecture:</p> <ul> <li>Models (<code>jackfield_labeler/models/</code>): Data structures for label strips, segments, and settings</li> <li>Views (<code>jackfield_labeler/views/</code>): PyQt6-based user interface components</li> <li>Utils (<code>jackfield_labeler/utils/</code>): PDF generation, rendering, and project management</li> <li>Controllers: Logic is integrated within views using PyQt6's signal-slot mechanism</li> </ul>"},{"location":"activeContext/#technology-stack","title":"Technology Stack","text":"<ul> <li>Python 3.12+ with comprehensive type hints</li> <li>PyQt6 (\u22656.9.0) for cross-platform GUI</li> <li>ReportLab (\u22654.4.1) for professional PDF generation</li> <li>UV package manager for fast dependency management</li> <li>Ruff for code quality and formatting</li> <li>pytest for testing framework</li> </ul>"},{"location":"activeContext/#development-workflow","title":"Development Workflow","text":"<ul> <li>Package Management: Use UV for all operations (<code>uv add</code>, <code>uv run</code>, <code>uv sync</code>)</li> <li>Application Execution: <code>uv run -m jackfield_labeler</code></li> <li>Testing: <code>uv run pytest</code> for test suite execution</li> <li>Code Quality: <code>uv run ruff check</code> and <code>uv run ruff format</code></li> <li>Documentation: See <code>docs/development.md</code> for detailed instructions</li> </ul>"},{"location":"activeContext/#codebase-statistics","title":"Codebase Statistics","text":"<ul> <li>Main Application: ~3,500 lines of Python code across 21 files</li> <li>Test Suite: ~315 lines of tests</li> <li>Dependencies: 3 core runtime dependencies, 9 development dependencies</li> <li>Architecture: Clean MVC separation with well-defined interfaces</li> </ul>"},{"location":"activeContext/#key-features-implemented","title":"Key Features Implemented","text":""},{"location":"activeContext/#core-functionality","title":"Core Functionality","text":"<ul> <li>Label strip design with customizable segments</li> <li>Real-time preview and validation</li> <li>Professional PDF generation with rotation</li> <li>Project save/load with JSON serialization</li> <li>Cross-platform compatibility (Windows, macOS, Linux)</li> </ul>"},{"location":"activeContext/#user-interface","title":"User Interface","text":"<ul> <li>Intuitive tabbed interface (Designer, Settings, Preview)</li> <li>Dynamic segment table with inline editing</li> <li>Color pickers and formatting options</li> <li>Responsive design with immediate feedback</li> <li>Professional styling and layout</li> </ul>"},{"location":"activeContext/#output-capabilities","title":"Output Capabilities","text":"<ul> <li>High-quality PDF generation using ReportLab</li> <li>Intelligent rotation for optimal paper usage</li> <li>Multiple paper size support (A0-A4, Letter, Legal, Tabloid)</li> <li>PNG export with 300 DPI resolution</li> <li>Center-to-center positioning algorithm</li> </ul>"},{"location":"activeContext/#development-priorities","title":"Development Priorities","text":"<ol> <li>Immediate: Complete version 1.0 release preparation</li> <li>Short-term: Create standalone executables for distribution</li> <li>Medium-term: Enhance documentation and user guides</li> <li>Long-term: Community release and ongoing maintenance</li> </ol>"},{"location":"activeContext/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>Code Quality: PEP 8 compliance enforced by Ruff</li> <li>Type Safety: Comprehensive type hints throughout</li> <li>Testing: Good test coverage for core functionality</li> <li>Documentation: Google-style docstrings and comprehensive guides</li> <li>Error Handling: Robust exception handling with custom error types</li> </ul>"},{"location":"api-reference/","title":"API Reference","text":""},{"location":"api-reference/#overview","title":"Overview","text":"<p>This document provides comprehensive API documentation for the Jackfield Labeler application. All public interfaces, classes, and methods are documented with type signatures, parameters, return values, and usage examples.</p>"},{"location":"api-reference/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Models Module</li> <li>Views Module</li> <li>Utils Module</li> <li>Error Handling</li> <li>Signals Reference</li> <li>Constants</li> <li>Usage Examples</li> </ol>"},{"location":"api-reference/#models-module","title":"Models Module","text":""},{"location":"api-reference/#labelstrip","title":"LabelStrip","text":"<p>The central data model representing a complete label strip design.</p> <pre><code>class LabelStrip:\n    \"\"\"\n    Represents a complete label strip with all its segments.\n\n    A label strip consists of:\n    - An optional start segment\n    - Multiple content segments (cells)\n    - An optional end segment\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#constants","title":"Constants","text":"<pre><code>MIN_HEIGHT: float = 5.0   # Minimum height in mm\nMAX_HEIGHT: float = 12.0  # Maximum height in mm\nMAX_WIDTH: float = 500.0  # Maximum total width in mm\n</code></pre>"},{"location":"api-reference/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, height: float = 5.0) -&gt; None:\n    \"\"\"\n    Initialize a new label strip.\n\n    Args:\n        height: The height of the strip in mm (default: 5.0)\n\n    Raises:\n        ValueError: If height is outside valid range\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#properties","title":"Properties","text":"<pre><code>@property\ndef height(self) -&gt; float:\n    \"\"\"Get the height of the strip in mm.\"\"\"\n\n@height.setter\ndef height(self, value: float) -&gt; None:\n    \"\"\"\n    Set the height of the strip in mm.\n\n    The height is constrained to the allowed range.\n\n    Args:\n        value: Height in mm (5.0-12.0)\n    \"\"\"\n\n@property\ndef content_cell_width(self) -&gt; float:\n    \"\"\"Get the width of content cells in mm.\"\"\"\n\n@content_cell_width.setter\ndef content_cell_width(self, value: float) -&gt; None:\n    \"\"\"\n    Set the width of content cells in mm.\n\n    Args:\n        value: Width in mm (must be positive)\n\n    Raises:\n        ValueError: If the width is negative or zero\n    \"\"\"\n\n@property\ndef start_segment(self) -&gt; StartSegment | None:\n    \"\"\"Get the start segment, or None if not used.\"\"\"\n\n@property\ndef end_segment(self) -&gt; EndSegment | None:\n    \"\"\"Get the end segment, or None if not used.\"\"\"\n\n@property\ndef content_segments(self) -&gt; list[ContentSegment]:\n    \"\"\"Get a copy of the list of content segments.\"\"\"\n\n@property\ndef settings(self) -&gt; StripSettings:\n    \"\"\"Get the strip settings.\"\"\"\n\n@settings.setter\ndef settings(self, value: StripSettings) -&gt; None:\n    \"\"\"Set the strip settings.\"\"\"\n</code></pre>"},{"location":"api-reference/#methods","title":"Methods","text":"<pre><code>def set_start_segment(self, width: float = 0.0, text: str = \"\") -&gt; StartSegment | None:\n    \"\"\"\n    Configure the start segment of the strip.\n\n    Args:\n        width: Width in mm (0.0 means no start segment)\n        text: Text content\n\n    Returns:\n        The start segment instance, or None if width is 0\n\n    Raises:\n        ValueError: If the width is negative\n    \"\"\"\n\ndef set_end_segment(self, width: float = 0.0, text: str = \"\") -&gt; EndSegment | None:\n    \"\"\"\n    Configure the end segment of the strip.\n\n    Args:\n        width: Width in mm (0.0 means no end segment)\n        text: Text content\n\n    Returns:\n        The end segment instance, or None if width is 0\n\n    Raises:\n        ValueError: If the width is negative\n    \"\"\"\n\ndef set_content_segment_count(self, count: int) -&gt; None:\n    \"\"\"\n    Set the number of content segments.\n\n    This will add or remove segments as needed.\n\n    Args:\n        count: Number of content segments\n\n    Raises:\n        ValueError: If count is negative\n    \"\"\"\n\ndef get_all_segments(self) -&gt; list[Segment]:\n    \"\"\"\n    Get all segments in order (start, content, end).\n\n    Returns:\n        List of all segments in display order\n    \"\"\"\n\ndef get_total_width(self) -&gt; float:\n    \"\"\"\n    Calculate the total width of the strip.\n\n    Returns:\n        Total width in mm (sum of all segment widths)\n    \"\"\"\n\ndef get_segment_by_id(self, segment_id: str) -&gt; Segment | None:\n    \"\"\"\n    Find a segment by its ID.\n\n    Args:\n        segment_id: The segment identifier\n\n    Returns:\n        The segment if found, None otherwise\n    \"\"\"\n\ndef validate(self) -&gt; list[str]:\n    \"\"\"\n    Validate the label strip configuration.\n\n    Returns:\n        List of validation error messages (empty if valid)\n    \"\"\"\n\ndef to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\n    Convert the label strip to a dictionary.\n\n    Returns:\n        Dictionary representation suitable for JSON serialization\n    \"\"\"\n\ndef to_json(self) -&gt; str:\n    \"\"\"\n    Convert the label strip to JSON string.\n\n    Returns:\n        JSON string representation\n    \"\"\"\n\n@classmethod\ndef from_dict(cls, data: dict[str, Any]) -&gt; \"LabelStrip\":\n    \"\"\"\n    Create a label strip from a dictionary.\n\n    Args:\n        data: Dictionary containing label strip data\n\n    Returns:\n        New LabelStrip instance\n\n    Raises:\n        ValueError: If data is invalid or missing required fields\n    \"\"\"\n\n@classmethod\ndef from_json(cls, json_str: str) -&gt; \"LabelStrip\":\n    \"\"\"\n    Create a label strip from JSON string.\n\n    Args:\n        json_str: JSON string containing label strip data\n\n    Returns:\n        New LabelStrip instance\n\n    Raises:\n        ValueError: If JSON is invalid or missing required fields\n        json.JSONDecodeError: If JSON parsing fails\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#segment-classes","title":"Segment Classes","text":""},{"location":"api-reference/#base-segment","title":"Base Segment","text":"<pre><code>@dataclass\nclass Segment:\n    \"\"\"Base class for all segment types.\"\"\"\n\n    width: float\n    text: str\n    text_color: str\n    background_color: str\n    text_format: TextFormat\n\n    def validate(self) -&gt; list[str]:\n        \"\"\"\n        Validate segment properties.\n\n        Returns:\n            List of validation error messages\n        \"\"\"\n\n    def to_dict(self) -&gt; dict[str, Any]:\n        \"\"\"\n        Convert segment to dictionary.\n\n        Returns:\n            Dictionary representation\n        \"\"\"\n</code></pre>"},{"location":"api-reference/#startsegment","title":"StartSegment","text":"<pre><code>@dataclass\nclass StartSegment(Segment):\n    \"\"\"\n    Start segment for label strips (e.g., 'INPUT').\n\n    Currently not used in the UI but supported in the data model.\n    \"\"\"\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"Validate start segment after initialization.\"\"\"\n</code></pre>"},{"location":"api-reference/#contentsegment","title":"ContentSegment","text":"<pre><code>@dataclass\nclass ContentSegment(Segment):\n    \"\"\"\n    Content segment for main label cells (e.g., 'CH1', 'CH2').\n\n    These are the primary segments used for channel labeling.\n    \"\"\"\n\n    id: str = field(init=False)  # Auto-generated identifier\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"Set up content segment after initialization.\"\"\"\n</code></pre>"},{"location":"api-reference/#endsegment","title":"EndSegment","text":"<pre><code>@dataclass\nclass EndSegment(Segment):\n    \"\"\"\n    End segment for label strips (e.g., 'OUTPUT').\n\n    Configurable through the UI with independent width and text.\n    \"\"\"\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"Validate end segment after initialization.\"\"\"\n</code></pre>"},{"location":"api-reference/#factory-function","title":"Factory Function","text":"<pre><code>def create_segment_from_dict(data: dict[str, Any]) -&gt; Segment:\n    \"\"\"\n    Create appropriate segment type from dictionary data.\n\n    Args:\n        data: Dictionary containing segment data with 'type' field\n\n    Returns:\n        Segment instance of appropriate type\n\n    Raises:\n        ValueError: If segment type is unknown or data is invalid\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#stripsettings","title":"StripSettings","text":"<p>Configuration model for global settings.</p> <pre><code>@dataclass\nclass StripSettings:\n    \"\"\"Global settings for label strip generation.\"\"\"\n\n    paper_size: str = \"A3\"\n    page_margins: PageMargins = field(default_factory=PageMargins)\n    rotation_angle: float = 60.0\n    default_font_name: str = \"Arial\"\n    default_font_size: float = 8.0\n    default_text_color: str = \"#000000\"\n    default_background_color: str = \"#FFFFFF\"\n</code></pre>"},{"location":"api-reference/#methods_1","title":"Methods","text":"<pre><code>def validate(self) -&gt; list[str]:\n    \"\"\"\n    Validate settings configuration.\n\n    Returns:\n        List of validation error messages\n    \"\"\"\n\ndef to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\n    Convert settings to dictionary.\n\n    Returns:\n        Dictionary representation\n    \"\"\"\n\n@classmethod\ndef from_dict(cls, data: dict[str, Any]) -&gt; \"StripSettings\":\n    \"\"\"\n    Create settings from dictionary.\n\n    Args:\n        data: Dictionary containing settings data\n\n    Returns:\n        New StripSettings instance\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#supporting-classes","title":"Supporting Classes","text":""},{"location":"api-reference/#pagemargins","title":"PageMargins","text":"<pre><code>@dataclass\nclass PageMargins:\n    \"\"\"Page margin configuration.\"\"\"\n\n    top: float = 10.0\n    right: float = 10.0\n    bottom: float = 10.0\n    left: float = 10.0\n\n    def validate(self) -&gt; list[str]:\n        \"\"\"Validate margin values (0-50mm range).\"\"\"\n</code></pre>"},{"location":"api-reference/#color","title":"Color","text":"<pre><code>class Color:\n    \"\"\"RGB color representation with standard color constants.\"\"\"\n\n    def __init__(self, red: int, green: int, blue: int) -&gt; None:\n        \"\"\"\n        Initialize color with RGB values.\n\n        Args:\n            red: Red component (0-255)\n            green: Green component (0-255)\n            blue: Blue component (0-255)\n        \"\"\"\n\n    def to_hex(self) -&gt; str:\n        \"\"\"Convert to hex color string (#RRGGBB).\"\"\"\n\n    def to_rgb_tuple(self) -&gt; tuple[int, int, int]:\n        \"\"\"Convert to RGB tuple.\"\"\"\n\n    @classmethod\n    def from_hex(cls, hex_color: str) -&gt; \"Color\":\n        \"\"\"Create color from hex string.\"\"\"\n\n    # Standard color constants\n    BLACK: ClassVar[\"Color\"]\n    WHITE: ClassVar[\"Color\"]\n    RED: ClassVar[\"Color\"]\n    GREEN: ClassVar[\"Color\"]\n    BLUE: ClassVar[\"Color\"]\n    YELLOW: ClassVar[\"Color\"]\n    ORANGE: ClassVar[\"Color\"]\n    PURPLE: ClassVar[\"Color\"]\n</code></pre>"},{"location":"api-reference/#textformat","title":"TextFormat","text":"<pre><code>class TextFormat(Enum):\n    \"\"\"Text formatting options.\"\"\"\n\n    NORMAL = \"NORMAL\"\n    BOLD = \"BOLD\"\n    ITALIC = \"ITALIC\"\n</code></pre>"},{"location":"api-reference/#papersize","title":"PaperSize","text":"<pre><code>class PaperSize(Enum):\n    \"\"\"Standard paper sizes with dimensions in mm.\"\"\"\n\n    A0 = \"A0\"      # 841 \u00d7 1189 mm\n    A1 = \"A1\"      # 594 \u00d7 841 mm\n    A2 = \"A2\"      # 420 \u00d7 594 mm\n    A3 = \"A3\"      # 297 \u00d7 420 mm\n    A4 = \"A4\"      # 210 \u00d7 297 mm\n    LETTER = \"Letter\"    # 216 \u00d7 279 mm\n    LEGAL = \"Legal\"      # 216 \u00d7 356 mm\n    TABLOID = \"Tabloid\"  # 279 \u00d7 432 mm\n</code></pre>"},{"location":"api-reference/#views-module","title":"Views Module","text":""},{"location":"api-reference/#mainwindow","title":"MainWindow","text":"<p>The primary application window that coordinates all functionality.</p> <pre><code>class MainWindow(QMainWindow):\n    \"\"\"Main application window with tab management and file operations.\"\"\"\n</code></pre>"},{"location":"api-reference/#signals","title":"Signals","text":"<pre><code>project_changed = pyqtSignal()  # Emitted when project state changes\nfile_saved = pyqtSignal(str)    # Emitted when file is saved (filename)\nfile_loaded = pyqtSignal(str)   # Emitted when file is loaded (filename)\n</code></pre>"},{"location":"api-reference/#constructor_1","title":"Constructor","text":"<pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the main window with tabs and menu bar.\"\"\"\n</code></pre>"},{"location":"api-reference/#methods_2","title":"Methods","text":"<pre><code>def new_project(self) -&gt; None:\n    \"\"\"Create a new project, prompting to save current changes.\"\"\"\n\ndef open_project(self) -&gt; None:\n    \"\"\"Open an existing project file.\"\"\"\n\ndef save_project(self) -&gt; None:\n    \"\"\"Save the current project.\"\"\"\n\ndef save_project_as(self) -&gt; None:\n    \"\"\"Save the current project with a new filename.\"\"\"\n\ndef generate_pdf(self) -&gt; None:\n    \"\"\"Generate PDF output of the current label strip.\"\"\"\n\ndef export_png(self) -&gt; None:\n    \"\"\"Export PNG image of the current label strip.\"\"\"\n\ndef get_current_label_strip(self) -&gt; LabelStrip:\n    \"\"\"Get the current label strip from the designer tab.\"\"\"\n\ndef set_project_modified(self, modified: bool) -&gt; None:\n    \"\"\"Update the project modification state.\"\"\"\n\ndef closeEvent(self, event: QCloseEvent) -&gt; None:\n    \"\"\"Handle window close event with save prompt.\"\"\"\n</code></pre>"},{"location":"api-reference/#designertab","title":"DesignerTab","text":"<p>Main workspace for creating and editing label strips.</p> <pre><code>class DesignerTab(QWidget):\n    \"\"\"Label design interface with control panel and segment table.\"\"\"\n</code></pre>"},{"location":"api-reference/#signals_1","title":"Signals","text":"<pre><code>strip_changed = pyqtSignal()           # Emitted when strip is modified\nsegment_added = pyqtSignal(int)        # Emitted when segment is added\nsegment_removed = pyqtSignal(int)      # Emitted when segment is removed\n</code></pre>"},{"location":"api-reference/#constructor_2","title":"Constructor","text":"<pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the designer tab with control panel and table.\"\"\"\n</code></pre>"},{"location":"api-reference/#methods_3","title":"Methods","text":"<pre><code>def get_label_strip(self) -&gt; LabelStrip:\n    \"\"\"Get the current label strip configuration.\"\"\"\n\ndef set_label_strip(self, label_strip: LabelStrip) -&gt; None:\n    \"\"\"Set the label strip configuration and update UI.\"\"\"\n\ndef add_content_segment(self) -&gt; None:\n    \"\"\"Add a new content segment to the table.\"\"\"\n\ndef remove_selected_segment(self) -&gt; None:\n    \"\"\"Remove the currently selected segment.\"\"\"\n\ndef apply_settings(self, settings: StripSettings) -&gt; None:\n    \"\"\"Apply global settings to the current strip.\"\"\"\n\ndef validate_input(self) -&gt; list[str]:\n    \"\"\"Validate all user input and return error messages.\"\"\"\n</code></pre>"},{"location":"api-reference/#previewtab","title":"PreviewTab","text":"<p>Real-time visual preview and PNG export functionality.</p> <pre><code>class PreviewTab(QWidget):\n    \"\"\"Preview interface with visual representation and export controls.\"\"\"\n</code></pre>"},{"location":"api-reference/#constructor_3","title":"Constructor","text":"<pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the preview tab with preview widget and controls.\"\"\"\n</code></pre>"},{"location":"api-reference/#methods_4","title":"Methods","text":"<pre><code>def update_preview(self, label_strip: LabelStrip) -&gt; None:\n    \"\"\"Update the preview with the given label strip.\"\"\"\n\ndef export_png(self, filename: str) -&gt; bool:\n    \"\"\"\n    Export the current preview as PNG.\n\n    Args:\n        filename: Output filename\n\n    Returns:\n        True if export successful, False otherwise\n    \"\"\"\n\ndef get_preview_scale_factor(self) -&gt; float:\n    \"\"\"Get the current preview scale factor.\"\"\"\n\ndef refresh_preview(self) -&gt; None:\n    \"\"\"Force refresh of the preview display.\"\"\"\n</code></pre>"},{"location":"api-reference/#settingstab","title":"SettingsTab","text":"<p>Global configuration interface for paper, rotation, and default settings.</p> <pre><code>class SettingsTab(QWidget):\n    \"\"\"Settings interface with grouped configuration controls.\"\"\"\n</code></pre>"},{"location":"api-reference/#signals_2","title":"Signals","text":"<pre><code>settings_changed = pyqtSignal(StripSettings)  # Emitted when settings change\n</code></pre>"},{"location":"api-reference/#constructor_4","title":"Constructor","text":"<pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the settings tab with grouped controls.\"\"\"\n</code></pre>"},{"location":"api-reference/#methods_5","title":"Methods","text":"<pre><code>def get_settings(self) -&gt; StripSettings:\n    \"\"\"Get the current settings configuration.\"\"\"\n\ndef set_settings(self, settings: StripSettings) -&gt; None:\n    \"\"\"Set the settings configuration and update UI.\"\"\"\n\ndef reset_to_defaults(self) -&gt; None:\n    \"\"\"Reset all settings to default values.\"\"\"\n\ndef validate_settings(self) -&gt; list[str]:\n    \"\"\"Validate current settings and return error messages.\"\"\"\n</code></pre>"},{"location":"api-reference/#utils-module","title":"Utils Module","text":""},{"location":"api-reference/#pdfgenerator","title":"PDFGenerator","text":"<p>High-quality PDF generation with rotation and positioning.</p> <pre><code>class PDFGenerator:\n    \"\"\"Professional PDF generation using ReportLab.\"\"\"\n</code></pre>"},{"location":"api-reference/#constructor_5","title":"Constructor","text":"<pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the PDF generator with default settings.\"\"\"\n</code></pre>"},{"location":"api-reference/#methods_6","title":"Methods","text":"<pre><code>def generate_pdf(\n    self,\n    label_strip: LabelStrip,\n    filename: str,\n    settings: StripSettings | None = None\n) -&gt; bool:\n    \"\"\"\n    Generate PDF file from label strip.\n\n    Args:\n        label_strip: The label strip to render\n        filename: Output PDF filename\n        settings: Optional settings override\n\n    Returns:\n        True if generation successful, False otherwise\n\n    Raises:\n        IOError: If file cannot be written\n        ValueError: If label strip is invalid\n    \"\"\"\n\ndef calculate_positioning(\n    self,\n    strip_width: float,\n    strip_height: float,\n    paper_size: str,\n    rotation_angle: float\n) -&gt; tuple[float, float]:\n    \"\"\"\n    Calculate center positioning for strip on paper.\n\n    Args:\n        strip_width: Width of strip in mm\n        strip_height: Height of strip in mm\n        paper_size: Paper size identifier\n        rotation_angle: Rotation angle in degrees\n\n    Returns:\n        Tuple of (center_x, center_y) in points\n    \"\"\"\n\ndef get_paper_dimensions(self, paper_size: str) -&gt; tuple[float, float]:\n    \"\"\"\n    Get paper dimensions in points.\n\n    Args:\n        paper_size: Paper size identifier\n\n    Returns:\n        Tuple of (width, height) in points\n\n    Raises:\n        ValueError: If paper size is not supported\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#striprenderer","title":"StripRenderer","text":"<p>PNG rendering and preview generation engine.</p> <pre><code>class StripRenderer:\n    \"\"\"High-quality PNG rendering using Qt.\"\"\"\n</code></pre>"},{"location":"api-reference/#constructor_6","title":"Constructor","text":"<pre><code>def __init__(self, dpi: int = 300) -&gt; None:\n    \"\"\"\n    Initialize the renderer.\n\n    Args:\n        dpi: Dots per inch for output resolution\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#methods_7","title":"Methods","text":"<pre><code>def render_to_pixmap(\n    self,\n    label_strip: LabelStrip,\n    scale_factor: float = 1.0\n) -&gt; QPixmap:\n    \"\"\"\n    Render label strip to QPixmap.\n\n    Args:\n        label_strip: The label strip to render\n        scale_factor: Scale factor for output size\n\n    Returns:\n        QPixmap containing rendered strip\n    \"\"\"\n\ndef render_to_file(\n    self,\n    label_strip: LabelStrip,\n    filename: str,\n    dpi: int | None = None\n) -&gt; bool:\n    \"\"\"\n    Render label strip directly to PNG file.\n\n    Args:\n        label_strip: The label strip to render\n        filename: Output PNG filename\n        dpi: Optional DPI override\n\n    Returns:\n        True if rendering successful, False otherwise\n    \"\"\"\n\ndef calculate_dimensions(\n    self,\n    label_strip: LabelStrip,\n    scale_factor: float = 1.0\n) -&gt; tuple[int, int]:\n    \"\"\"\n    Calculate pixel dimensions for rendering.\n\n    Args:\n        label_strip: The label strip\n        scale_factor: Scale factor\n\n    Returns:\n        Tuple of (width_px, height_px)\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#projectmanager","title":"ProjectManager","text":"<p>Project file management with .jlp format support.</p> <pre><code>class ProjectManager:\n    \"\"\"Project file management and serialization.\"\"\"\n</code></pre>"},{"location":"api-reference/#static-methods","title":"Static Methods","text":"<pre><code>@staticmethod\ndef save_project(label_strip: LabelStrip, filename: str) -&gt; bool:\n    \"\"\"\n    Save project to .jlp file.\n\n    Args:\n        label_strip: The label strip to save\n        filename: Output filename\n\n    Returns:\n        True if save successful, False otherwise\n\n    Raises:\n        IOError: If file cannot be written\n        ValueError: If label strip is invalid\n    \"\"\"\n\n@staticmethod\ndef load_project(filename: str) -&gt; LabelStrip:\n    \"\"\"\n    Load project from .jlp file.\n\n    Args:\n        filename: Input filename\n\n    Returns:\n        Loaded LabelStrip instance\n\n    Raises:\n        IOError: If file cannot be read\n        ValueError: If file format is invalid\n        json.JSONDecodeError: If JSON parsing fails\n    \"\"\"\n\n@staticmethod\ndef validate_project_file(filename: str) -&gt; bool:\n    \"\"\"\n    Validate project file format.\n\n    Args:\n        filename: File to validate\n\n    Returns:\n        True if file is valid, False otherwise\n    \"\"\"\n\n@staticmethod\ndef get_project_metadata(filename: str) -&gt; dict[str, Any]:\n    \"\"\"\n    Extract metadata from project file.\n\n    Args:\n        filename: Project file\n\n    Returns:\n        Dictionary containing metadata\n\n    Raises:\n        IOError: If file cannot be read\n        ValueError: If file format is invalid\n    \"\"\"\n</code></pre>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":""},{"location":"api-reference/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>class JackfieldLabelerError(Exception):\n    \"\"\"Base exception for all application errors.\"\"\"\n\nclass ValidationError(JackfieldLabelerError):\n    \"\"\"Raised when validation fails.\"\"\"\n\nclass FileFormatError(JackfieldLabelerError):\n    \"\"\"Raised when file format is invalid.\"\"\"\n\nclass RenderingError(JackfieldLabelerError):\n    \"\"\"Raised when rendering fails.\"\"\"\n\nclass ConfigurationError(JackfieldLabelerError):\n    \"\"\"Raised when configuration is invalid.\"\"\"\n</code></pre>"},{"location":"api-reference/#error-handling-patterns","title":"Error Handling Patterns","text":"<pre><code># Model validation\ntry:\n    errors = label_strip.validate()\n    if errors:\n        raise ValidationError(f\"Validation failed: {', '.join(errors)}\")\nexcept ValidationError as e:\n    # Handle validation errors\n    show_error_message(str(e))\n\n# File operations\ntry:\n    label_strip = ProjectManager.load_project(filename)\nexcept (IOError, FileFormatError) as e:\n    # Handle file errors\n    show_error_message(f\"Failed to load project: {e}\")\n\n# PDF generation\ntry:\n    success = pdf_generator.generate_pdf(label_strip, filename)\n    if not success:\n        raise RenderingError(\"PDF generation failed\")\nexcept RenderingError as e:\n    # Handle rendering errors\n    show_error_message(str(e))\n</code></pre>"},{"location":"api-reference/#signals-reference","title":"Signals Reference","text":""},{"location":"api-reference/#model-signals","title":"Model Signals","text":"<pre><code># LabelStrip signals (if QObject-based)\nstrip_changed = pyqtSignal()                    # Strip modified\nsegment_added = pyqtSignal(int)                 # Segment added (index)\nsegment_removed = pyqtSignal(int)               # Segment removed (index)\nsettings_changed = pyqtSignal(StripSettings)    # Settings modified\n</code></pre>"},{"location":"api-reference/#view-signals","title":"View Signals","text":"<pre><code># MainWindow signals\nproject_changed = pyqtSignal()                  # Project state changed\nfile_saved = pyqtSignal(str)                    # File saved (filename)\nfile_loaded = pyqtSignal(str)                   # File loaded (filename)\n\n# DesignerTab signals\nstrip_changed = pyqtSignal()                    # Strip design changed\nsegment_added = pyqtSignal(int)                 # Segment added\nsegment_removed = pyqtSignal(int)               # Segment removed\n\n# SettingsTab signals\nsettings_changed = pyqtSignal(StripSettings)    # Settings changed\n\n# PreviewTab signals\npreview_updated = pyqtSignal()                  # Preview refreshed\nexport_completed = pyqtSignal(str)              # Export completed (filename)\n</code></pre>"},{"location":"api-reference/#signal-connection-examples","title":"Signal Connection Examples","text":"<pre><code># Connect designer changes to preview updates\ndesigner_tab.strip_changed.connect(preview_tab.update_preview)\n\n# Connect settings changes to designer\nsettings_tab.settings_changed.connect(designer_tab.apply_settings)\n\n# Connect file operations\nmain_window.file_saved.connect(lambda f: status_bar.showMessage(f\"Saved: {f}\"))\nmain_window.file_loaded.connect(lambda f: status_bar.showMessage(f\"Loaded: {f}\"))\n</code></pre>"},{"location":"api-reference/#constants_1","title":"Constants","text":""},{"location":"api-reference/#application-constants","title":"Application Constants","text":"<pre><code># Application information\nAPP_NAME = \"Jackfield Labeler\"\nAPP_VERSION = \"1.0.0\"\nFILE_FORMAT_VERSION = \"1.0\"\n\n# File extensions\nPROJECT_EXTENSION = \".jlp\"\nPDF_EXTENSION = \".pdf\"\nPNG_EXTENSION = \".png\"\n\n# Default values\nDEFAULT_STRIP_HEIGHT = 6.0          # mm\nDEFAULT_CONTENT_WIDTH = 12.0        # mm\nDEFAULT_ROTATION_ANGLE = 60.0       # degrees\nDEFAULT_PAPER_SIZE = \"A3\"\nDEFAULT_FONT_NAME = \"Arial\"\nDEFAULT_FONT_SIZE = 8.0             # points\nDEFAULT_DPI = 300                   # dots per inch\n\n# Validation limits\nMIN_STRIP_HEIGHT = 5.0              # mm\nMAX_STRIP_HEIGHT = 12.0             # mm\nMAX_TOTAL_WIDTH = 500.0             # mm\nMIN_SEGMENT_WIDTH = 0.1             # mm\nMAX_MARGIN = 50.0                   # mm\n\n# Color constants (hex strings)\nDEFAULT_TEXT_COLOR = \"#000000\"      # Black\nDEFAULT_BACKGROUND_COLOR = \"#FFFFFF\" # White\n</code></pre>"},{"location":"api-reference/#paper-size-constants","title":"Paper Size Constants","text":"<pre><code>PAPER_SIZES = {\n    \"A0\": (841, 1189),      # mm\n    \"A1\": (594, 841),       # mm\n    \"A2\": (420, 594),       # mm\n    \"A3\": (297, 420),       # mm\n    \"A4\": (210, 297),       # mm\n    \"Letter\": (216, 279),   # mm\n    \"Legal\": (216, 356),    # mm\n    \"Tabloid\": (279, 432),  # mm\n}\n\n# Points per mm conversion\nPOINTS_PER_MM = 2.834645669\n</code></pre>"},{"location":"api-reference/#usage-examples","title":"Usage Examples","text":""},{"location":"api-reference/#creating-a-label-strip","title":"Creating a Label Strip","text":"<pre><code>from jackfield_labeler.models import LabelStrip, StripSettings\n\n# Create a new label strip\nstrip = LabelStrip(height=6.0)\n\n# Set content cell width\nstrip.content_cell_width = 12.0\n\n# Add content segments\nstrip.set_content_segment_count(4)\n\n# Configure segments\nsegments = strip.content_segments\nsegments[0].text = \"CH1\"\nsegments[0].background_color = \"#FFFF00\"  # Yellow\nsegments[1].text = \"CH2\"\nsegments[1].background_color = \"#FF0000\"  # Red\nsegments[2].text = \"CH3\"\nsegments[2].background_color = \"#00FF00\"  # Green\nsegments[3].text = \"CH4\"\nsegments[3].background_color = \"#0000FF\"  # Blue\n\n# Add end segment\nstrip.set_end_segment(width=15.0, text=\"OUTPUT\")\n\n# Validate the strip\nerrors = strip.validate()\nif errors:\n    print(f\"Validation errors: {errors}\")\nelse:\n    print(f\"Strip is valid, total width: {strip.get_total_width()}mm\")\n</code></pre>"},{"location":"api-reference/#generating-pdf-output","title":"Generating PDF Output","text":"<pre><code>from jackfield_labeler.utils import PDFGenerator\nfrom jackfield_labeler.models import StripSettings\n\n# Create PDF generator\ngenerator = PDFGenerator()\n\n# Configure settings\nsettings = StripSettings(\n    paper_size=\"A3\",\n    rotation_angle=60.0\n)\n\n# Generate PDF\nsuccess = generator.generate_pdf(\n    label_strip=strip,\n    filename=\"my_label.pdf\",\n    settings=settings\n)\n\nif success:\n    print(\"PDF generated successfully\")\nelse:\n    print(\"PDF generation failed\")\n</code></pre>"},{"location":"api-reference/#rendering-png-image","title":"Rendering PNG Image","text":"<pre><code>from jackfield_labeler.utils import StripRenderer\n\n# Create renderer with high DPI\nrenderer = StripRenderer(dpi=300)\n\n# Render to file\nsuccess = renderer.render_to_file(\n    label_strip=strip,\n    filename=\"my_label.png\"\n)\n\nif success:\n    print(\"PNG exported successfully\")\nelse:\n    print(\"PNG export failed\")\n</code></pre>"},{"location":"api-reference/#project-file-management","title":"Project File Management","text":"<pre><code>from jackfield_labeler.utils import ProjectManager\n\n# Save project\nsuccess = ProjectManager.save_project(strip, \"my_project.jlp\")\nif success:\n    print(\"Project saved\")\n\n# Load project\ntry:\n    loaded_strip = ProjectManager.load_project(\"my_project.jlp\")\n    print(f\"Loaded strip with {len(loaded_strip.content_segments)} segments\")\nexcept (IOError, ValueError) as e:\n    print(f\"Failed to load project: {e}\")\n\n# Validate project file\nif ProjectManager.validate_project_file(\"my_project.jlp\"):\n    print(\"Project file is valid\")\nelse:\n    print(\"Project file is invalid\")\n</code></pre>"},{"location":"api-reference/#working-with-colors","title":"Working with Colors","text":"<pre><code>from jackfield_labeler.models import Color\n\n# Create colors\nred = Color(255, 0, 0)\nblue = Color.from_hex(\"#0000FF\")\n\n# Use standard colors\nyellow = Color.YELLOW\ngreen = Color.GREEN\n\n# Convert colors\nhex_color = red.to_hex()        # \"#FF0000\"\nrgb_tuple = blue.to_rgb_tuple() # (0, 0, 255)\n\n# Apply to segments\nsegment.text_color = red.to_hex()\nsegment.background_color = yellow.to_hex()\n</code></pre>"},{"location":"api-reference/#custom-validation","title":"Custom Validation","text":"<pre><code>def validate_professional_strip(strip: LabelStrip) -&gt; list[str]:\n    \"\"\"Custom validation for professional use.\"\"\"\n    errors = []\n\n    # Check minimum dimensions\n    if strip.height &lt; 6.0:\n        errors.append(\"Professional strips should be at least 6mm high\")\n\n    # Check segment count\n    if len(strip.content_segments) &lt; 2:\n        errors.append(\"Professional strips should have at least 2 channels\")\n\n    # Check text content\n    for i, segment in enumerate(strip.content_segments):\n        if not segment.text.strip():\n            errors.append(f\"Segment {i+1} has no text\")\n\n    return errors\n\n# Use custom validation\nerrors = validate_professional_strip(strip)\nif errors:\n    print(\"Professional validation failed:\")\n    for error in errors:\n        print(f\"  - {error}\")\n</code></pre> <p>This API reference provides comprehensive documentation for all public interfaces in the Jackfield Labeler application. For additional examples and usage patterns, refer to the test suite and user guide documentation.</p>"},{"location":"architecture/","title":"Architecture Documentation","text":""},{"location":"architecture/#overview","title":"Overview","text":"<p>The Jackfield Labeler application is built using a clean Model-View-Controller (MVC) architecture with PyQt6 for the user interface and ReportLab for PDF generation. The application is designed to be maintainable, extensible, and user-friendly, with approximately 3,300 lines of application code and comprehensive test coverage.</p>"},{"location":"architecture/#architecture-principles","title":"Architecture Principles","text":""},{"location":"architecture/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<ul> <li>Models: Pure data structures and business logic, independent of UI</li> <li>Views: PyQt6 widgets responsible only for presentation and user interaction</li> <li>Utils: Specialized utilities for PDF generation, rendering, and file management</li> <li>Controllers: Coordination between models and views (minimal in this Qt-based architecture)</li> </ul>"},{"location":"architecture/#2-data-flow","title":"2. Data Flow","text":"<pre><code>User Input \u2192 View \u2192 Model Update \u2192 Signal Emission \u2192 View Update \u2192 Preview/Export\n</code></pre>"},{"location":"architecture/#3-signal-driven-architecture","title":"3. Signal-Driven Architecture","text":"<p>The application uses PyQt6's signal-slot mechanism for loose coupling between components:</p> <ul> <li>Models emit signals when data changes</li> <li>Views listen to model signals and update accordingly</li> <li>Cross-tab communication through main window signal routing</li> </ul>"},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#models-jackfield_labelermodels","title":"Models (<code>jackfield_labeler/models/</code>)","text":""},{"location":"architecture/#labelstrip-label_strippy","title":"LabelStrip (<code>label_strip.py</code>)","text":"<p>The central data model representing a complete label strip design.</p> <p>Key Features:</p> <ul> <li>Manages collections of segments (start, content, end)</li> <li>Calculates total width and validates dimensions</li> <li>Provides serialization/deserialization for project files</li> <li>Maintains strip settings and configuration</li> </ul> <p>Key Methods:</p> <ul> <li><code>get_total_width()</code>: Calculates total strip width</li> <li><code>set_content_segment_count()</code>: Manages content segment collection</li> <li><code>set_start_segment()</code> / <code>set_end_segment()</code>: Configure optional segments</li> <li><code>to_dict()</code> / <code>from_dict()</code>: Serialization support</li> <li><code>validate()</code>: Comprehensive validation with error reporting</li> </ul> <p>Validation Rules:</p> <ul> <li>Height constraints: 5.0mm - 12.0mm</li> <li>Maximum total width: 500.0mm</li> <li>Positive segment widths</li> <li>Content cell width precision to 3 decimal places</li> </ul>"},{"location":"architecture/#segments-segment_typespy-segmentpy","title":"Segments (<code>segment_types.py</code>, <code>segment.py</code>)","text":"<p>Individual label segments with different types and properties.</p> <p>Segment Types:</p> <ul> <li>StartSegment: Optional start label (e.g., \"INPUT\")</li> <li>ContentSegment: Main content cells (e.g., \"CH1\", \"CH2\")</li> <li>EndSegment: Optional end label (e.g., \"OUTPUT\")</li> </ul> <p>Properties:</p> <ul> <li>Width (mm), Text, Text Color, Background Color, Text Format</li> <li>Type-specific validation and behavior</li> <li>Immutable design with builder pattern</li> </ul> <p>Factory Pattern:</p> <pre><code>def create_segment_from_dict(data: Dict[str, Any]) -&gt; Segment:\n    \"\"\"Creates appropriate segment type from dictionary data\"\"\"\n</code></pre>"},{"location":"architecture/#stripsettings-strip_settingspy","title":"StripSettings (<code>strip_settings.py</code>)","text":"<p>Configuration model for paper size, margins, rotation, and defaults.</p> <p>Settings Categories:</p> <ul> <li>Paper Settings: Size (A0-A4, Letter, Legal, Tabloid), margins</li> <li>Rotation Settings: Angle (0\u00b0-360\u00b0), with 60\u00b0 default</li> <li>Font Settings: Default font family and size</li> <li>Color Settings: Default text and background colors</li> </ul> <p>Default Values:</p> <ul> <li>Paper Size: A3 (297 \u00d7 420 mm)</li> <li>Rotation: 60\u00b0 (optimized for long strips)</li> <li>Margins: 10mm on all sides</li> <li>Font: Arial, 8pt</li> <li>Colors: Black text on white background</li> </ul>"},{"location":"architecture/#supporting-models","title":"Supporting Models","text":"<ul> <li>Color (<code>color.py</code>): RGB color model with standard color constants</li> <li>TextFormat (<code>text_format.py</code>): Enumeration for text formatting options</li> <li>PageMargins: Dataclass for page margin configuration</li> <li>PaperSize: Enumeration for standard paper sizes</li> </ul>"},{"location":"architecture/#views-jackfield_labelerviews","title":"Views (<code>jackfield_labeler/views/</code>)","text":""},{"location":"architecture/#mainwindow-main_windowpy","title":"MainWindow (<code>main_window.py</code>)","text":"<p>The primary application window that coordinates all tabs and provides global functionality.</p> <p>Responsibilities:</p> <ul> <li>Tab management (Designer, Preview, Settings)</li> <li>Menu bar and file operations (New, Open, Save, Export)</li> <li>Project state tracking (unsaved changes, window title)</li> <li>Signal routing between tabs</li> <li>Global error handling and user feedback</li> </ul> <p>Key Features:</p> <ul> <li>Project lifecycle management</li> <li>Cross-tab communication via signal routing</li> <li>Status bar updates and user feedback</li> <li>File dialog management with proper filtering</li> <li>Window title updates showing project state</li> </ul> <p>Signal Routing:</p> <pre><code># Example signal connections\nself.designer_tab.strip_changed.connect(self.preview_tab.update_preview)\nself.settings_tab.settings_changed.connect(self.designer_tab.apply_settings)\n</code></pre>"},{"location":"architecture/#designertab-designer_tabpy","title":"DesignerTab (<code>designer_tab.py</code>)","text":"<p>The main workspace for creating and editing label strips.</p> <p>Components:</p> <ul> <li>ControlPanel: Strip dimensions and global settings</li> <li>SegmentTable: Spreadsheet-like interface for segment editing</li> <li>ActionButtons: Add/remove segments, generate PDF, save/load</li> </ul> <p>Key Features:</p> <ul> <li>Real-time validation and feedback</li> <li>Dynamic table management with custom delegates</li> <li>Color picker integration</li> <li>Signal emission for all changes</li> <li>Automatic UI updates when model changes</li> </ul> <p>Table Management:</p> <ul> <li>Custom delegates for color buttons and format selection</li> <li>Dynamic row addition/removal</li> <li>Cell-level validation and feedback</li> <li>Tab navigation and keyboard shortcuts</li> </ul>"},{"location":"architecture/#previewtab-preview_tabpy","title":"PreviewTab (<code>preview_tab.py</code>)","text":"<p>Real-time visual preview and PNG export functionality.</p> <p>Components:</p> <ul> <li>StripPreviewWidget: Scalable visual representation</li> <li>StripInfoPanel: Dimensions and metadata display</li> <li>Export Controls: PNG export with quality settings</li> </ul> <p>Key Features:</p> <ul> <li>Auto-scaling preview with scroll support</li> <li>High-resolution rendering (300 DPI)</li> <li>Direct PNG export capability</li> <li>Responsive design that adapts to window size</li> <li>Real-time updates when strip changes</li> </ul> <p>Rendering Pipeline:</p> <pre><code># Preview update flow\nstrip_changed \u2192 calculate_scale_factor \u2192 render_to_pixmap \u2192 update_display\n</code></pre>"},{"location":"architecture/#settingstab-settings_tabpy","title":"SettingsTab (<code>settings_tab.py</code>)","text":"<p>Global configuration interface for paper, rotation, and default settings.</p> <p>Setting Groups:</p> <ul> <li>PaperGroup: Paper size and margin controls</li> <li>RotationGroup: Rotation angle with preset buttons</li> <li>FontGroup: Font family and size selection</li> <li>ColorGroup: Default color selection</li> </ul> <p>Key Features:</p> <ul> <li>Immediate setting application</li> <li>Preset rotation buttons (0\u00b0, 90\u00b0, 180\u00b0, 270\u00b0)</li> <li>Font dialog integration</li> <li>Color picker widgets</li> <li>Settings persistence with project files</li> </ul>"},{"location":"architecture/#utils-jackfield_labelerutils","title":"Utils (<code>jackfield_labeler/utils/</code>)","text":""},{"location":"architecture/#pdfgenerator-pdf_generatorpy","title":"PDFGenerator (<code>pdf_generator.py</code>)","text":"<p>High-quality PDF generation with rotation and positioning.</p> <p>Key Features:</p> <ul> <li>Support for all standard paper sizes</li> <li>Configurable rotation (0\u00b0-360\u00b0)</li> <li>Center-to-center positioning algorithm</li> <li>No automatic scaling (preserves exact dimensions)</li> <li>Color conversion and font handling</li> <li>Professional output quality</li> </ul> <p>Technical Implementation:</p> <ul> <li>Uses ReportLab Canvas for precise control</li> <li>Graphics state management for rotation</li> <li>Millimeter-to-point conversion (1mm = 2.834645669 points)</li> <li>Text centering and formatting</li> <li>Error handling and validation</li> </ul> <p>Positioning Algorithm:</p> <pre><code># Center-to-center positioning\ncenter_x = (paper_width - total_width) / 2\ncenter_y = (paper_height - strip_height) / 2\n\n# Apply rotation around center point\ncanvas.translate(center_x, center_y)\ncanvas.rotate(rotation_angle)\n</code></pre>"},{"location":"architecture/#striprenderer-strip_rendererpy","title":"StripRenderer (<code>strip_renderer.py</code>)","text":"<p>PNG rendering and preview generation engine.</p> <p>Key Features:</p> <ul> <li>Configurable DPI (default 300)</li> <li>Scalable preview rendering</li> <li>Anti-aliased output</li> <li>Qt-based rendering pipeline</li> </ul> <p>Use Cases:</p> <ul> <li>Preview tab visualization</li> <li>PNG export functionality</li> <li>Print preview generation</li> <li>High-resolution output for documentation</li> </ul> <p>Rendering Process:</p> <pre><code># High-level rendering flow\ncalculate_dimensions \u2192 create_pixmap \u2192 setup_painter \u2192 render_segments \u2192 return_pixmap\n</code></pre>"},{"location":"architecture/#projectmanager-project_managerpy","title":"ProjectManager (<code>project_manager.py</code>)","text":"<p>Project file management with <code>.jlp</code> format support.</p> <p>Key Features:</p> <ul> <li>JSON-based file format</li> <li>Version control and validation</li> <li>Comprehensive error handling</li> <li>Metadata management</li> </ul> <p>File Format Structure:</p> <pre><code>{\n  \"version\": \"1.0\",\n  \"application\": \"Jackfield Labeler\",\n  \"label_strip\": {\n    \"height\": 6.0,\n    \"content_cell_width\": 12.0,\n    \"segments\": [...],\n    \"settings\": {...}\n  },\n  \"metadata\": {\n    \"created_by\": \"Jackfield Labeler\",\n    \"file_format_version\": \"1.0\"\n  }\n}\n</code></pre> <p>Validation Features:</p> <ul> <li>JSON schema validation</li> <li>Version compatibility checking</li> <li>Data integrity verification</li> <li>Graceful error handling and recovery</li> </ul>"},{"location":"architecture/#data-flow-architecture","title":"Data Flow Architecture","text":""},{"location":"architecture/#1-user-interaction-flow","title":"1. User Interaction Flow","text":"<pre><code>User Input (Designer Tab)\n    \u2193\nControl Panel / Segment Table\n    \u2193\nModel Update (LabelStrip)\n    \u2193\nSignal Emission (strip_changed)\n    \u2193\nPreview Update (Preview Tab)\n    \u2193\nVisual Feedback\n</code></pre>"},{"location":"architecture/#2-settings-flow","title":"2. Settings Flow","text":"<pre><code>Settings Tab Input\n    \u2193\nStripSettings Model Update\n    \u2193\nSignal Emission (settings_changed)\n    \u2193\nDesigner Tab Update\n    \u2193\nModel Application\n    \u2193\nPreview Refresh\n</code></pre>"},{"location":"architecture/#3-export-flow","title":"3. Export Flow","text":"<pre><code>Export Request (Menu/Button)\n    \u2193\nCurrent Model State\n    \u2193\nGenerator (PDF/PNG)\n    \u2193\nFile Output\n    \u2193\nUser Feedback\n</code></pre>"},{"location":"architecture/#4-project-management-flow","title":"4. Project Management Flow","text":"<pre><code>Save: Model \u2192 Serialization \u2192 JSON \u2192 File\nLoad: File \u2192 JSON \u2192 Validation \u2192 Model \u2192 UI Update\n</code></pre>"},{"location":"architecture/#design-patterns","title":"Design Patterns","text":""},{"location":"architecture/#1-model-view-controller-mvc","title":"1. Model-View-Controller (MVC)","text":"<ul> <li>Clear separation between data, presentation, and logic</li> <li>Models are UI-independent and testable</li> <li>Views handle only presentation concerns</li> <li>Controllers coordinate interactions (minimal due to Qt's architecture)</li> </ul>"},{"location":"architecture/#2-observer-pattern","title":"2. Observer Pattern","text":"<ul> <li>PyQt6 signals and slots for loose coupling</li> <li>Models notify views of changes automatically</li> <li>Views update reactively to model changes</li> <li>Extensible for future features</li> </ul>"},{"location":"architecture/#3-strategy-pattern","title":"3. Strategy Pattern","text":"<ul> <li>Different segment types with common interface</li> <li>Pluggable PDF generation strategies</li> <li>Configurable rendering approaches</li> <li>Extensible for new segment types</li> </ul>"},{"location":"architecture/#4-builder-pattern","title":"4. Builder Pattern","text":"<ul> <li>Segment creation with fluent interface</li> <li>Complex object construction with validation</li> <li>Step-by-step object building</li> <li>Validation during construction process</li> </ul>"},{"location":"architecture/#5-factory-pattern","title":"5. Factory Pattern","text":"<ul> <li>Segment creation from dictionaries</li> <li>Type-specific instantiation based on data</li> <li>Extensible for new segment types</li> <li>Centralized object creation logic</li> </ul>"},{"location":"architecture/#6-command-pattern","title":"6. Command Pattern","text":"<ul> <li>File operations (save, load, export)</li> <li>Undo/redo capability (future enhancement)</li> <li>Operation encapsulation</li> <li>Error handling and rollback</li> </ul>"},{"location":"architecture/#error-handling-strategy","title":"Error Handling Strategy","text":""},{"location":"architecture/#1-validation-layers","title":"1. Validation Layers","text":"<ul> <li>Input Validation: UI-level validation with immediate feedback</li> <li>Model Validation: Business logic validation in models</li> <li>Output Validation: Generation-time validation</li> </ul>"},{"location":"architecture/#2-error-recovery","title":"2. Error Recovery","text":"<ul> <li>Graceful degradation for invalid inputs</li> <li>Default value fallbacks</li> <li>User-friendly error messages</li> <li>Automatic correction where possible</li> </ul>"},{"location":"architecture/#3-exception-handling","title":"3. Exception Handling","text":"<ul> <li>Try-catch blocks around critical operations</li> <li>Logging for debugging and diagnostics</li> <li>User notification for errors</li> <li>Resource cleanup in finally blocks</li> </ul>"},{"location":"architecture/#4-validation-examples","title":"4. Validation Examples","text":"<pre><code># Model validation\ndef validate(self) -&gt; list[str]:\n    \"\"\"Returns list of validation errors\"\"\"\n    errors = []\n    if self.height &lt; self.MIN_HEIGHT:\n        errors.append(f\"Height {self.height}mm is below minimum {self.MIN_HEIGHT}mm\")\n    return errors\n\n# UI validation\ndef _validate_input(self, value: str) -&gt; bool:\n    \"\"\"Validates user input with immediate feedback\"\"\"\n    try:\n        float_value = float(value)\n        return float_value &gt; 0\n    except ValueError:\n        return False\n</code></pre>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/#1-lazy-loading","title":"1. Lazy Loading","text":"<ul> <li>Preview updates only when visible</li> <li>Deferred PDF generation until requested</li> <li>On-demand rendering for large strips</li> </ul>"},{"location":"architecture/#2-caching","title":"2. Caching","text":"<ul> <li>Rendered preview caching for unchanged strips</li> <li>Font metrics caching for text rendering</li> <li>Color conversion caching for repeated colors</li> </ul>"},{"location":"architecture/#3-signal-optimization","title":"3. Signal Optimization","text":"<ul> <li>Batched updates for multiple changes</li> <li>Debounced preview updates to avoid excessive rendering</li> <li>Efficient signal routing to minimize overhead</li> </ul>"},{"location":"architecture/#4-memory-management","title":"4. Memory Management","text":"<ul> <li>Automatic cleanup of temporary objects</li> <li>Efficient pixmap handling</li> <li>Resource management for file operations</li> </ul>"},{"location":"architecture/#extensibility-points","title":"Extensibility Points","text":""},{"location":"architecture/#1-new-segment-types","title":"1. New Segment Types","text":"<ul> <li>Implement Segment base class</li> <li>Add to factory method in <code>create_segment_from_dict</code></li> <li>Update UI components for new properties</li> <li>Add validation rules</li> </ul>"},{"location":"architecture/#2-export-formats","title":"2. Export Formats","text":"<ul> <li>Implement generator interface</li> <li>Add to export menu and file dialogs</li> <li>Integrate with existing error handling</li> <li>Add format-specific settings</li> </ul>"},{"location":"architecture/#3-paper-sizes","title":"3. Paper Sizes","text":"<ul> <li>Add to PaperSize enumeration</li> <li>Update size mapping in PDFGenerator</li> <li>Test with rotation logic</li> <li>Validate with margin calculations</li> </ul>"},{"location":"architecture/#4-color-palettes","title":"4. Color Palettes","text":"<ul> <li>Extend StandardColor enumeration</li> <li>Add to color picker widgets</li> <li>Update serialization format</li> <li>Maintain backward compatibility</li> </ul>"},{"location":"architecture/#testing-strategy","title":"Testing Strategy","text":""},{"location":"architecture/#1-unit-tests","title":"1. Unit Tests","text":"<ul> <li>Model logic testing with comprehensive coverage</li> <li>Utility function testing with edge cases</li> <li>Validation testing with invalid inputs</li> <li>Serialization testing with various formats</li> </ul>"},{"location":"architecture/#2-integration-tests","title":"2. Integration Tests","text":"<ul> <li>Component interaction testing</li> <li>Signal/slot communication testing</li> <li>File format compatibility testing</li> <li>End-to-end workflow testing</li> </ul>"},{"location":"architecture/#3-ui-tests","title":"3. UI Tests","text":"<ul> <li>Widget behavior testing</li> <li>User interaction simulation</li> <li>Visual regression testing (future)</li> <li>Accessibility testing (future)</li> </ul>"},{"location":"architecture/#4-test-organization","title":"4. Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 test_models/           # Model unit tests\n\u251c\u2500\u2500 test_utils/            # Utility unit tests\n\u251c\u2500\u2500 test_integration/      # Integration tests\n\u2514\u2500\u2500 conftest.py           # Shared fixtures\n</code></pre>"},{"location":"architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/#1-file-handling","title":"1. File Handling","text":"<ul> <li>Path validation for project files</li> <li>Safe deserialization with validation</li> <li>Input sanitization for all user data</li> <li>Protection against path traversal</li> </ul>"},{"location":"architecture/#2-pdf-generation","title":"2. PDF Generation","text":"<ul> <li>Safe text rendering without code execution</li> <li>Resource limits for large documents</li> <li>Error containment and recovery</li> <li>Temporary file cleanup</li> </ul>"},{"location":"architecture/#3-user-input","title":"3. User Input","text":"<ul> <li>Validation of all numeric inputs</li> <li>Range checking for dimensions</li> <li>Type safety with proper conversion</li> <li>Sanitization of text content</li> </ul>"},{"location":"architecture/#future-architecture-considerations","title":"Future Architecture Considerations","text":""},{"location":"architecture/#1-plugin-system","title":"1. Plugin System","text":"<ul> <li>Extensible segment types through plugins</li> <li>Custom export formats via plugins</li> <li>Third-party integrations</li> <li>Plugin discovery and loading</li> </ul>"},{"location":"architecture/#2-multi-document-support","title":"2. Multi-Document Support","text":"<ul> <li>Multiple label strips in single project</li> <li>Batch processing capabilities</li> <li>Template management system</li> <li>Project organization features</li> </ul>"},{"location":"architecture/#3-cloud-integration","title":"3. Cloud Integration","text":"<ul> <li>Project synchronization across devices</li> <li>Collaborative editing capabilities</li> <li>Online template sharing</li> <li>Backup and versioning</li> </ul>"},{"location":"architecture/#4-advanced-rendering","title":"4. Advanced Rendering","text":"<ul> <li>3D preview capabilities</li> <li>Print simulation with color management</li> <li>Advanced typography features</li> <li>Custom font embedding</li> </ul>"},{"location":"architecture/#5-performance-enhancements","title":"5. Performance Enhancements","text":"<ul> <li>Multi-threaded rendering for large projects</li> <li>GPU acceleration for preview rendering</li> <li>Incremental updates for better responsiveness</li> <li>Background processing for exports</li> </ul> <p>This architecture provides a solid foundation for the current application while maintaining flexibility for future enhancements. The clean separation of concerns, comprehensive error handling, and extensible design patterns ensure the application can evolve to meet changing requirements while maintaining code quality and user experience.</p>"},{"location":"development/","title":"Development Guide","text":""},{"location":"development/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Getting Started</li> <li>Development Environment</li> <li>Project Structure</li> <li>Coding Standards</li> <li>Testing</li> <li>Documentation</li> <li>Git Workflow</li> <li>Release Process</li> <li>Troubleshooting</li> </ol>"},{"location":"development/#getting-started","title":"Getting Started","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<p>Before you begin development, ensure you have:</p> <ul> <li>Python 3.12+ installed</li> <li>Git for version control</li> <li>UV package manager (recommended over pip)</li> <li>A code editor with Python support (VS Code, PyCharm, etc.)</li> </ul>"},{"location":"development/#initial-setup","title":"Initial Setup","text":"<ol> <li>Fork and Clone the Repository</li> </ol> <p><code>bash    git clone https://github.com/yourusername/jackfield-labeler.git    cd jackfield-labeler</code></p> <ol> <li>Install UV (if not already installed)</li> </ol> <p><code>bash    curl -LsSf https://astral.sh/uv/install.sh | sh    # or on Windows:    # powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"</code></p> <ol> <li>Set Up Development Environment</li> </ol> <p><code>bash    make install    # or manually:    uv sync    uv run pre-commit install</code></p> <ol> <li>Verify Installation</li> </ol> <p><code>bash    make test    make run</code></p>"},{"location":"development/#development-environment","title":"Development Environment","text":""},{"location":"development/#uv-package-manager","title":"UV Package Manager","text":"<p>This project uses UV instead of pip for several advantages:</p> <p>Benefits:</p> <ul> <li>Significantly faster dependency resolution and installation</li> <li>Built-in virtual environment management</li> <li>Better dependency conflict resolution</li> <li>Modern approach to Python packaging</li> </ul> <p>Common Commands:</p> <pre><code># Install dependencies\nuv sync\n\n# Add a new dependency\nuv add package-name\n\n# Add a development dependency\nuv add --group dev package-name\n\n# Run the application\nuv run -m jackfield_labeler\n\n# Run tests\nuv run pytest\n\n# Run linting\nuv run ruff check\n\n# Format code\nuv run ruff format\n</code></pre>"},{"location":"development/#development-dependencies","title":"Development Dependencies","text":"<p>The project includes several development tools:</p> <pre><code>[dependency-groups]\ndev = [\n    \"pytest&gt;=8.3.5\",           # Testing framework\n    \"pytest-cov&gt;=6.0.0\",       # Coverage reporting\n    \"mypy&gt;=1.15\",               # Static type checking\n    \"ruff&gt;=0.11.11\",            # Linting and formatting\n    \"pre-commit&gt;=4.0.1\",        # Git hooks\n    \"mkdocs&gt;=1.6.1\",            # Documentation\n    \"mkdocs-material&gt;=9.5.47\",  # Documentation theme\n]\n</code></pre>"},{"location":"development/#ide-configuration","title":"IDE Configuration","text":""},{"location":"development/#vs-code","title":"VS Code","text":"<p>Recommended extensions:</p> <ul> <li>Python</li> <li>Pylance</li> <li>Ruff</li> <li>GitLens</li> </ul> <p>Settings (<code>.vscode/settings.json</code>):</p> <pre><code>{\n    \"python.defaultInterpreterPath\": \".venv/bin/python\",\n    \"python.linting.enabled\": true,\n    \"python.linting.ruffEnabled\": true,\n    \"python.formatting.provider\": \"ruff\",\n    \"python.testing.pytestEnabled\": true,\n    \"python.testing.pytestArgs\": [\"tests/\"]\n}\n</code></pre>"},{"location":"development/#pycharm","title":"PyCharm","text":"<ol> <li>Set Python interpreter to the UV virtual environment</li> <li>Enable Ruff for linting and formatting</li> <li>Configure pytest as the test runner</li> <li>Enable type checking with mypy</li> </ol>"},{"location":"development/#project-structure","title":"Project Structure","text":""},{"location":"development/#directory-layout","title":"Directory Layout","text":"<pre><code>jackfield-labeler/\n\u251c\u2500\u2500 .github/                 # GitHub workflows and templates\n\u251c\u2500\u2500 .vscode/                 # VS Code configuration\n\u251c\u2500\u2500 docs/                    # Documentation\n\u251c\u2500\u2500 examples/                # Sample projects and examples\n\u251c\u2500\u2500 jackfield_labeler/       # Main application package\n\u2502   \u251c\u2500\u2500 models/              # Data models\n\u2502   \u251c\u2500\u2500 views/               # UI components\n\u2502   \u251c\u2500\u2500 utils/               # Utility modules\n\u2502   \u2514\u2500\u2500 controllers/         # Application logic\n\u251c\u2500\u2500 tests/                   # Test suite\n\u251c\u2500\u2500 .gitignore              # Git ignore rules\n\u251c\u2500\u2500 .pre-commit-config.yaml # Pre-commit hooks\n\u251c\u2500\u2500 Makefile                # Development commands\n\u251c\u2500\u2500 pyproject.toml          # Project configuration\n\u251c\u2500\u2500 README.md               # Project overview\n\u2514\u2500\u2500 uv.lock                 # Dependency lock file\n</code></pre>"},{"location":"development/#module-organization","title":"Module Organization","text":""},{"location":"development/#models-jackfield_labelermodels","title":"Models (<code>jackfield_labeler/models/</code>)","text":"<ul> <li>Purpose: Data structures and business logic</li> <li>Guidelines:</li> <li>Keep models UI-independent</li> <li>Use dataclasses for simple data structures</li> <li>Implement validation in <code>__post_init__</code></li> <li>Emit signals for UI updates</li> </ul>"},{"location":"development/#views-jackfield_labelerviews","title":"Views (<code>jackfield_labeler/views/</code>)","text":"<ul> <li>Purpose: PyQt6 user interface components</li> <li>Guidelines:</li> <li>Separate UI logic from business logic</li> <li>Use signals for communication</li> <li>Keep widgets focused and reusable</li> <li>Follow Qt naming conventions</li> </ul>"},{"location":"development/#utils-jackfield_labelerutils","title":"Utils (<code>jackfield_labeler/utils/</code>)","text":"<ul> <li>Purpose: Utility functions and classes</li> <li>Guidelines:</li> <li>Make utilities stateless when possible</li> <li>Provide clear error handling</li> <li>Document complex algorithms</li> <li>Keep dependencies minimal</li> </ul>"},{"location":"development/#coding-standards","title":"Coding Standards","text":""},{"location":"development/#python-style-guide","title":"Python Style Guide","text":"<p>We follow PEP 8 with some modifications enforced by Ruff:</p> <pre><code>[tool.ruff]\ntarget-version = \"py312\"\nline-length = 120\nfix = true\n\n[tool.ruff.lint]\nselect = [\n    \"E\", \"W\",    # pycodestyle\n    \"F\",         # pyflakes\n    \"I\",         # isort\n    \"B\",         # flake8-bugbear\n    \"C4\",        # flake8-comprehensions\n    \"UP\",        # pyupgrade\n    \"RUF\",       # ruff-specific rules\n]\n</code></pre>"},{"location":"development/#type-hints","title":"Type Hints","text":"<p>All code must include type hints:</p> <pre><code># Good\ndef calculate_width(segments: List[Segment]) -&gt; float:\n    \"\"\"Calculate total width of segments.\"\"\"\n    return sum(segment.width for segment in segments)\n\n# Bad\ndef calculate_width(segments):\n    return sum(segment.width for segment in segments)\n</code></pre>"},{"location":"development/#documentation","title":"Documentation","text":""},{"location":"development/#docstring-format","title":"Docstring Format","text":"<p>Use Google-style docstrings:</p> <pre><code>def generate_pdf(self, label_strip: LabelStrip, filename: str,\n                rotation_angle: float | None = None) -&gt; bool:\n    \"\"\"\n    Generate PDF file from label strip.\n\n    Args:\n        label_strip: The label strip to render\n        filename: Output PDF filename\n        rotation_angle: Optional rotation override\n\n    Returns:\n        True if PDF was generated successfully, False otherwise\n\n    Raises:\n        RenderingError: If PDF generation fails\n        FileNotFoundError: If output directory doesn't exist\n    \"\"\"\n</code></pre>"},{"location":"development/#code-comments","title":"Code Comments","text":"<ul> <li>Use comments sparingly for complex logic</li> <li>Prefer self-documenting code</li> <li>Explain \"why\" not \"what\"</li> </ul> <pre><code># Good\n# Use center-to-center positioning to ensure consistent spacing\nx_offset = (paper_width - total_width) / 2\n\n# Bad\n# Set x_offset to half the difference\nx_offset = (paper_width - total_width) / 2\n</code></pre>"},{"location":"development/#error-handling","title":"Error Handling","text":""},{"location":"development/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>class JackfieldLabelerError(Exception):\n    \"\"\"Base exception for all application errors.\"\"\"\n\nclass ValidationError(JackfieldLabelerError):\n    \"\"\"Raised when data validation fails.\"\"\"\n\nclass FileFormatError(JackfieldLabelerError):\n    \"\"\"Raised when file format is invalid.\"\"\"\n</code></pre>"},{"location":"development/#error-handling-patterns","title":"Error Handling Patterns","text":"<pre><code># Specific exception handling\ntry:\n    strip = ProjectManager.load_project(filename)\nexcept FileNotFoundError:\n    logger.error(f\"Project file not found: {filename}\")\n    return None\nexcept FileFormatError as e:\n    logger.error(f\"Invalid project file format: {e}\")\n    return None\n\n# Resource cleanup\ntry:\n    with open(filename, 'w') as f:\n        json.dump(data, f)\nexcept IOError as e:\n    logger.error(f\"Failed to save project: {e}\")\n    raise\n</code></pre>"},{"location":"development/#testing","title":"Testing","text":""},{"location":"development/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 conftest.py              # Pytest configuration and fixtures\n\u251c\u2500\u2500 test_models/             # Model tests\n\u2502   \u251c\u2500\u2500 test_label_strip.py\n\u2502   \u251c\u2500\u2500 test_segments.py\n\u2502   \u2514\u2500\u2500 test_settings.py\n\u251c\u2500\u2500 test_utils/              # Utility tests\n\u2502   \u251c\u2500\u2500 test_pdf_generator.py\n\u2502   \u251c\u2500\u2500 test_strip_renderer.py\n\u2502   \u2514\u2500\u2500 test_project_manager.py\n\u2514\u2500\u2500 test_integration/        # Integration tests\n    \u251c\u2500\u2500 test_file_operations.py\n    \u2514\u2500\u2500 test_export_workflow.py\n</code></pre>"},{"location":"development/#writing-tests","title":"Writing Tests","text":""},{"location":"development/#unit-tests","title":"Unit Tests","text":"<pre><code>import pytest\nfrom jackfield_labeler.models import LabelStrip, ContentSegment\n\nclass TestLabelStrip:\n    def test_total_width_calculation(self):\n        \"\"\"Test that total width is calculated correctly.\"\"\"\n        strip = LabelStrip(content_cell_width=10.0)\n        strip.add_content_segment(\"CH1\")\n        strip.add_content_segment(\"CH2\")\n\n        assert strip.get_total_width() == 20.0\n\n    def test_segment_addition(self):\n        \"\"\"Test adding segments to strip.\"\"\"\n        strip = LabelStrip()\n        initial_count = len(strip.segments)\n\n        segment = strip.add_content_segment(\"Test\")\n\n        assert len(strip.segments) == initial_count + 1\n        assert segment.text == \"Test\"\n\n    @pytest.mark.parametrize(\"height,expected\", [\n        (5.0, 5.0),\n        (10.5, 10.5),\n        (0.1, 0.1),\n    ])\n    def test_height_values(self, height, expected):\n        \"\"\"Test various height values.\"\"\"\n        strip = LabelStrip(height=height)\n        assert strip.height == expected\n</code></pre>"},{"location":"development/#integration-tests","title":"Integration Tests","text":"<pre><code>def test_pdf_generation_workflow():\n    \"\"\"Test complete PDF generation workflow.\"\"\"\n    # Create test strip\n    strip = LabelStrip(height=6.0, content_cell_width=12.0)\n    strip.add_content_segment(\"CH1\", background_color=\"#FFFF00\")\n    strip.add_content_segment(\"CH2\", background_color=\"#FF0000\")\n\n    # Generate PDF\n    generator = PDFGenerator(strip.settings)\n    output_file = \"test_output.pdf\"\n\n    try:\n        success = generator.generate_pdf(strip, output_file)\n        assert success\n        assert os.path.exists(output_file)\n        assert os.path.getsize(output_file) &gt; 0\n    finally:\n        if os.path.exists(output_file):\n            os.remove(output_file)\n</code></pre>"},{"location":"development/#fixtures","title":"Fixtures","text":"<pre><code># conftest.py\nimport pytest\nfrom jackfield_labeler.models import LabelStrip, StripSettings\n\n@pytest.fixture\ndef sample_strip():\n    \"\"\"Create a sample label strip for testing.\"\"\"\n    strip = LabelStrip(height=6.0, content_cell_width=12.0)\n    strip.add_content_segment(\"CH1\", background_color=\"#FFFF00\")\n    strip.add_content_segment(\"CH2\", background_color=\"#FF0000\")\n    strip.add_content_segment(\"CH3\", background_color=\"#00FF00\")\n    return strip\n\n@pytest.fixture\ndef temp_project_file(tmp_path):\n    \"\"\"Create a temporary project file.\"\"\"\n    return tmp_path / \"test_project.jlp\"\n</code></pre>"},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nmake test\nuv run pytest\n\n# Run with coverage\nmake coverage\nuv run pytest --cov=jackfield_labeler --cov-report=html\n\n# Run specific test file\nuv run pytest tests/test_models/test_label_strip.py\n\n# Run tests matching pattern\nuv run pytest -k \"test_width\"\n\n# Run tests with verbose output\nuv run pytest -v\n\n# Run tests and stop on first failure\nuv run pytest -x\n</code></pre>"},{"location":"development/#test-configuration","title":"Test Configuration","text":"<pre><code>[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\naddopts = [\n    \"--cov=jackfield_labeler\",\n    \"--cov-report=term-missing\",\n    \"--cov-report=html\",\n    \"--strict-markers\",\n]\nmarkers = [\n    \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n    \"integration: marks tests as integration tests\",\n]\n\n[tool.coverage.run]\nbranch = true\nsource = [\"jackfield_labeler\"]\nomit = [\n    \"*/tests/*\",\n    \"*/conftest.py\",\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n]\n</code></pre>"},{"location":"development/#documentation_1","title":"Documentation","text":""},{"location":"development/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                 # Main documentation index\n\u251c\u2500\u2500 user-guide.md           # User guide\n\u251c\u2500\u2500 architecture.md         # Architecture documentation\n\u251c\u2500\u2500 technical.md            # Technical documentation\n\u251c\u2500\u2500 api-reference.md        # API reference\n\u251c\u2500\u2500 development.md          # This file\n\u2514\u2500\u2500 changelog.md            # Release notes\n</code></pre>"},{"location":"development/#writing-documentation","title":"Writing Documentation","text":""},{"location":"development/#markdown-guidelines","title":"Markdown Guidelines","text":"<ul> <li>Use clear, descriptive headings</li> <li>Include code examples where appropriate</li> <li>Use tables for structured information</li> <li>Add diagrams for complex concepts</li> </ul>"},{"location":"development/#code-examples","title":"Code Examples","text":"<p>Always test code examples:</p> <pre><code># Example: Creating a label strip\nfrom jackfield_labeler.models import LabelStrip\n\nstrip = LabelStrip(height=6.0, content_cell_width=12.0)\nstrip.add_content_segment(\"CH1\")\nprint(f\"Total width: {strip.get_total_width()}mm\")  # Output: Total width: 12.0mm\n</code></pre>"},{"location":"development/#api-documentation","title":"API Documentation","text":"<p>Use consistent format for API documentation:</p> <pre><code>### method_name\n\n```python\ndef method_name(self, param1: Type1, param2: Type2 = default) -&gt; ReturnType:\n</code></pre> <p>Description of what the method does.</p> <p>Parameters:</p> <ul> <li><code>param1</code> (Type1): Description of parameter</li> <li><code>param2</code> (Type2, optional): Description with default value</li> </ul> <p>Returns:</p> <ul> <li><code>ReturnType</code>: Description of return value</li> </ul> <p>Raises:</p> <ul> <li><code>ExceptionType</code>: When this exception is raised</li> </ul> <p>Example:</p> <pre><code>result = obj.method_name(\"value1\", param2=\"value2\")\n</code></pre> <pre><code>\n### Building Documentation\n\n```bash\n# Install documentation dependencies\nuv sync\n\n# Serve documentation locally\nmake docs\nuv run mkdocs serve\n\n# Build documentation\nuv run mkdocs build\n\n# Deploy to GitHub Pages\nuv run mkdocs gh-deploy\n</code></pre>"},{"location":"development/#git-workflow","title":"Git Workflow","text":""},{"location":"development/#branch-strategy","title":"Branch Strategy","text":"<p>We use a simplified Git Flow:</p> <ul> <li>main: Production-ready code</li> <li>develop: Integration branch for features</li> <li>feature/: Feature development branches</li> <li>hotfix/: Critical bug fixes</li> <li>release/: Release preparation branches</li> </ul>"},{"location":"development/#commit-messages","title":"Commit Messages","text":"<p>Follow conventional commit format:</p> <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types:</p> <ul> <li><code>feat</code>: New feature</li> <li><code>fix</code>: Bug fix</li> <li><code>docs</code>: Documentation changes</li> <li><code>style</code>: Code style changes</li> <li><code>refactor</code>: Code refactoring</li> <li><code>test</code>: Test changes</li> <li><code>chore</code>: Build/tooling changes</li> </ul> <p>Examples:</p> <pre><code>feat(models): add end segment support\n\nAdd EndSegment class and integration with LabelStrip.\nIncludes validation and serialization support.\n\nCloses #123\n\nfix(pdf): correct rotation calculation\n\nThe rotation angle was being calculated incorrectly for\nstrips wider than the paper. Fixed the algorithm to\nproperly handle all paper sizes.\n\ndocs(api): update LabelStrip documentation\n\nAdd missing method documentation and usage examples.\n</code></pre>"},{"location":"development/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create Feature Branch</li> </ol> <p><code>bash    git checkout -b feature/your-feature-name</code></p> <ol> <li>Make Changes</li> <li>Write code following style guidelines</li> <li>Add tests for new functionality</li> <li> <p>Update documentation as needed</p> </li> <li> <p>Run Quality Checks</p> </li> </ol> <p><code>bash    make lint    make typecheck    make test</code></p> <ol> <li>Commit Changes</li> </ol> <p><code>bash    git add .    git commit -m \"feat(scope): description\"</code></p> <ol> <li>Push and Create PR</li> </ol> <p><code>bash    git push origin feature/your-feature-name    # Create pull request on GitHub</code></p> <ol> <li>PR Requirements</li> <li>All tests pass</li> <li>Code coverage maintained</li> <li>Documentation updated</li> <li>Code review approved</li> </ol>"},{"location":"development/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>The project uses pre-commit hooks to ensure code quality:</p> <pre><code>repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.6\n    hooks:\n      - id: ruff\n        args: [--fix]\n      - id: ruff-format\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.7.1\n    hooks:\n      - id: mypy\n</code></pre> <p>Install hooks:</p> <pre><code>uv run pre-commit install\n</code></pre> <p>Run manually:</p> <pre><code>uv run pre-commit run --all-files\n</code></pre>"},{"location":"development/#release-process","title":"Release Process","text":""},{"location":"development/#version-management","title":"Version Management","text":"<p>We use semantic versioning (SemVer):</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features (backward compatible)</li> <li>PATCH: Bug fixes (backward compatible)</li> </ul>"},{"location":"development/#release-steps","title":"Release Steps","text":"<ol> <li>Prepare Release Branch</li> </ol> <p><code>bash    git checkout -b release/v1.2.0</code></p> <ol> <li>Update Version</li> </ol> <p><code>toml    # pyproject.toml    [project]    version = \"1.2.0\"</code></p> <ol> <li>Update Changelog</li> </ol> <p>```markdown    # Changelog</p> <p>## [1.2.0] - 2024-01-15</p> <p>### Added    - New feature descriptions</p> <p>### Changed    - Changed feature descriptions</p> <p>### Fixed    - Bug fix descriptions    ```</p> <ol> <li>Run Full Test Suite</li> </ol> <p><code>bash    make test    make integration-test    make lint    make typecheck</code></p> <ol> <li>Create Release PR</li> <li>Merge release branch to main</li> <li>Tag release: <code>git tag v1.2.0</code></li> <li> <p>Push tags: <code>git push --tags</code></p> </li> <li> <p>GitHub Release</p> </li> <li>Create GitHub release from tag</li> <li>Include changelog in release notes</li> <li>Attach any release artifacts</li> </ol>"},{"location":"development/#automated-releases","title":"Automated Releases","text":"<p>GitHub Actions can automate releases:</p> <pre><code>name: Release\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.12'\n      - name: Install UV\n        run: curl -LsSf https://astral.sh/uv/install.sh | sh\n      - name: Run tests\n        run: |\n          uv sync\n          uv run pytest\n      - name: Build package\n        run: uv build\n      - name: Create release\n        uses: actions/create-release@v1\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n</code></pre>"},{"location":"development/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/#common-development-issues","title":"Common Development Issues","text":""},{"location":"development/#uv-installation-problems","title":"UV Installation Problems","text":"<pre><code># If UV installation fails\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nsource ~/.bashrc\n\n# Verify installation\nuv --version\n</code></pre>"},{"location":"development/#dependency-conflicts","title":"Dependency Conflicts","text":"<pre><code># Clear UV cache\nuv cache clean\n\n# Reinstall dependencies\nrm uv.lock\nuv sync\n</code></pre>"},{"location":"development/#test-failures","title":"Test Failures","text":"<pre><code># Run tests with verbose output\nuv run pytest -v\n\n# Run specific failing test\nuv run pytest tests/test_models/test_label_strip.py::test_specific_function -v\n\n# Debug with pdb\nuv run pytest --pdb\n</code></pre>"},{"location":"development/#import-errors","title":"Import Errors","text":"<pre><code># Verify package installation\nuv run python -c \"import jackfield_labeler; print('OK')\"\n\n# Check Python path\nuv run python -c \"import sys; print(sys.path)\"\n\n# Reinstall in development mode\nuv pip install -e .\n</code></pre>"},{"location":"development/#pyqt6-issues","title":"PyQt6 Issues","text":"<pre><code># Install system dependencies (Ubuntu/Debian)\nsudo apt-get install python3-pyqt6\n\n# Install system dependencies (macOS)\nbrew install pyqt6\n\n# Verify PyQt6 installation\nuv run python -c \"from PyQt6.QtWidgets import QApplication; print('PyQt6 OK')\"\n</code></pre>"},{"location":"development/#performance-issues","title":"Performance Issues","text":""},{"location":"development/#slow-tests","title":"Slow Tests","text":"<pre><code># Run tests in parallel\nuv run pytest -n auto\n\n# Profile slow tests\nuv run pytest --profile\n\n# Skip slow tests\nuv run pytest -m \"not slow\"\n</code></pre>"},{"location":"development/#memory-usage","title":"Memory Usage","text":"<pre><code># Monitor memory usage\nuv run python -m memory_profiler script.py\n\n# Use memory-efficient alternatives\n# - Use generators instead of lists\n# - Clear large objects explicitly\n# - Use weak references where appropriate\n</code></pre>"},{"location":"development/#debugging-tips","title":"Debugging Tips","text":""},{"location":"development/#logging","title":"Logging","text":"<pre><code>import logging\n\n# Enable debug logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\n# Use in code\nlogger.debug(\"Debug information\")\nlogger.info(\"General information\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\n</code></pre>"},{"location":"development/#pyqt6-debugging","title":"PyQt6 Debugging","text":"<pre><code># Enable Qt logging\nimport os\nos.environ['QT_LOGGING_RULES'] = '*=true'\n\n# Debug signals and slots\nfrom PyQt6.QtCore import QObject\nQObject.connect = lambda *args: print(f\"Connect: {args}\")\n</code></pre>"},{"location":"development/#profiling","title":"Profiling","text":"<pre><code>import cProfile\nimport pstats\n\ndef profile_function():\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    # Your code here\n\n    profiler.disable()\n    stats = pstats.Stats(profiler)\n    stats.sort_stats('cumulative')\n    stats.print_stats()\n</code></pre>"},{"location":"development/#getting-help","title":"Getting Help","text":""},{"location":"development/#documentation_2","title":"Documentation","text":"<ul> <li>Read the user guide and API reference</li> <li>Check the architecture documentation</li> <li>Review existing code for patterns</li> </ul>"},{"location":"development/#community","title":"Community","text":"<ul> <li>Check GitHub issues for similar problems</li> <li>Search Stack Overflow for PyQt6/Python issues</li> <li>Ask questions in GitHub discussions</li> </ul>"},{"location":"development/#reporting-issues","title":"Reporting Issues","text":"<p>When reporting bugs, include:</p> <ul> <li>Python version and OS</li> <li>UV version</li> <li>Complete error traceback</li> <li>Minimal reproduction case</li> <li>Expected vs actual behavior</li> </ul> <p>This development guide should help you get started with contributing to the Jackfield Labeler project. For questions or clarifications, please open an issue on GitHub.</p>"},{"location":"projectbrief/","title":"Jackfield Labeler","text":""},{"location":"projectbrief/#1-introduction-project-goals","title":"1. Introduction &amp; Project Goals \ud83c\udfaf","text":"<ul> <li>Primary Goal: To create a desktop application that allows users to design and print custom label strips for 19\" equipment rack jackfields.</li> <li>Label Dimensions: Strips are typically 5mm to 12mm tall and can be up to 400mm to 500mm wide (though the application should support user-defined widths).</li> <li>Key Innovation: The application intelligently rotates long label strips to fit diagonally on standard paper sizes (e.g., A4, Letter), enabling printing on common office printers.</li> <li>User Interface: Provides an intuitive GUI for entering label text, defining segment properties (width, colors), and configuring output settings.</li> <li>Output: The final output is a PDF document, ready for printing.</li> </ul>"},{"location":"projectbrief/#2-target-user","title":"2. Target User \ud83e\uddd1\u200d\ud83d\udcbb","text":"<ul> <li>Audio engineers, broadcast technicians, IT professionals, lab managers, or anyone needing to create clear, custom labels for patch panels, jackfields, and other rack-mounted equipment.</li> </ul>"},{"location":"projectbrief/#3-technical-details","title":"3. Technical Details \ud83d\udee0\ufe0f","text":"<ul> <li>Programming Language: Python 3.12+</li> <li>GUI Framework: PyQt6 (\u22656.9.0)</li> <li>PDF Generation: ReportLab (\u22654.4.1) for professional PDF output</li> <li>Platform: Cross-platform compatibility (Windows, macOS, Linux) leveraging Python and PyQt6</li> <li>Package Manager: This application uses UV and NOT pip. Dependencies should be added with <code>uv add</code> and the application should be run using <code>uv run -m jackfield_labeler</code></li> </ul>"},{"location":"projectbrief/#4-core-functionality","title":"4. Core Functionality \u2699\ufe0f","text":""},{"location":"projectbrief/#41-label-strip-design","title":"4.1. Label Strip Design","text":"<ul> <li>Overall Strip Height: User-definable (e.g., in millimeters, with one decimal place).</li> <li>Strip Composition: A single label strip is composed of several horizontal segments:</li> <li>An optional \"Start Label\" segment (e.g., for a general title or identifier). Its width can be set to zero if not used.</li> <li>A user-defined number of main \"Content Cells\" (for individual jack labels).</li> <li>An optional \"End Label\" segment. Its width can be set to zero if not used.</li> <li>Segment Widths:</li> <li>Content Cell Width (mm): A uniform width applied to all main content cells. Settable up to 3 decimal places.</li> <li>Start Label Width (mm): A separately definable width for the \"Start Label\" segment. Settable up to 3 decimal places.</li> <li>End Label Width (mm): A separately definable width for the \"End Label\" segment. Settable up to 3 decimal places.</li> <li>Total Strip Width: Automatically calculated and displayed to the user based on the number of content cells and the defined widths of all segments.</li> </ul>"},{"location":"projectbrief/#42-label-segment-configuration-spreadsheet-like-interface","title":"4.2. Label Segment Configuration (Spreadsheet-like Interface)","text":"<p>The main interface features a table where each row defines a segment of the single label strip being designed.</p> <ul> <li>Rows:</li> <li>The first row represents the \"Start Label\" segment (labeled \"L Start\" or similar, dynamically present based on its defined width).</li> <li>Subsequent rows represent the \"Content Cells\" (labeled \"1\", \"2\", \"3\", ...).</li> <li>The last row represents the \"End Label\" segment (labeled \"L End\" or similar, dynamically present based on its defined width).</li> <li>Columns for each segment row:</li> <li>Segment ID: Read-only (e.g., \"L Start\", \"1\", \"2\", ..., \"L End\").</li> <li>Text: The text to display on that segment of the label.</li> <li>Text Format: Dropdown or radio buttons (Normal, Bold, Italic, Bold &amp; Italic).</li> <li>Text Color: Color picker/dropdown (e.g., Black, White, Red initially).</li> <li>Background Color: Color picker/dropdown (e.g., White, Black, Red, Orange, Yellow, Green, Blue, Purple initially).</li> </ul>"},{"location":"projectbrief/#43-pdf-output-printing-preparation","title":"4.3. PDF Output &amp; Printing Preparation","text":"<ul> <li>Generate a high-quality PDF of the designed label strip.</li> <li>Automatic Rotation for Printing:</li> <li>A core capability of the application is to handle labels that are too long for the selected paper width.</li> <li>If the total strip width exceeds the effective printable width of the selected paper size, the application calculates the necessary rotation angle to print the strip diagonally across the page.</li> <li>The PDF is generated with the strip pre-rotated and positioned optimally on the selected paper size, considering specified margins.</li> <li>Paper Size Selection: User can choose from standard paper sizes (A0-A4, Letter, Legal, Tabloid).</li> </ul>"},{"location":"projectbrief/#44-real-time-preview","title":"4.4. Real-time Preview \u2728","text":"<ul> <li>A dedicated Preview tab in the UI showing a scaled visual representation of the label strip as it's being designed. This preview updates dynamically as the user changes properties or text.</li> </ul>"},{"location":"projectbrief/#5-application-layout","title":"5. Application Layout \ud83d\uddbc\ufe0f","text":"<p>The application consists of three main tabs:</p>"},{"location":"projectbrief/#51-designer-tab-main-view","title":"5.1. Designer Tab (Main View)","text":"<ul> <li>Global Strip Controls (Input Panel):</li> <li>Number of Content Cells: Numeric input with up/down arrows.</li> <li>Content Cell Width (mm): Numeric input (e.g., <code>QDoubleSpinBox</code>), settable to 3 decimal places, with up/down arrows.</li> <li>End Label Width (mm): Numeric input, 3 decimal places, up/down arrows (allows 0).</li> <li>End Label Text: Text input for the end label content.</li> <li>Strip Height (mm): Numeric input (e.g., 1 decimal place), up/down arrows.</li> <li>Total Strip Width (mm): Read-only display, automatically updated.</li> <li>Label Segments Table:</li> <li>As described in section 4.2. Rows for \"Start Label\", \"Content Cells\", and \"End Label\" dynamically appear/disappear or are marked as inactive if their corresponding widths are set to zero.</li> <li>Action Buttons:</li> <li><code>Generate PDF</code></li> <li><code>Save Project</code></li> <li><code>Load Project</code></li> </ul>"},{"location":"projectbrief/#52-settings-tab","title":"5.2. Settings Tab \u2699\ufe0f","text":"<ul> <li>Paper Size: Dropdown list (A4, A3, A2, A1, A0, Letter, Legal, Tabloid) with A3 as default.</li> <li>Default Text Font: Font selection dialog (e.g., <code>QFontDialog</code>) to choose from available system fonts.</li> <li>Default Font Size (pt): Numeric input for the font size to be used on labels.</li> <li>Page Margins (mm): Input fields for Top, Bottom, Left, Right margins for the PDF output. This affects the available space for printing the (potentially rotated) strip.</li> <li>Default Text Color: For new segments.</li> <li>Default Background Color: For new segments.</li> <li>Rotation Settings: Configurable rotation angle (0\u00b0-360\u00b0) with preset buttons for common angles.</li> </ul>"},{"location":"projectbrief/#53-preview-tab","title":"5.3. Preview Tab \ud83d\udc41\ufe0f","text":"<ul> <li>Strip Information: Displays dimensions, segment count, and configuration details.</li> <li>Visual Preview: Scaled preview that updates automatically with design changes.</li> <li>Export Options: Direct PNG export with high resolution (300 DPI).</li> </ul>"},{"location":"projectbrief/#6-non-functional-requirements","title":"6. Non-Functional Requirements","text":"<ul> <li>Usability: The application should be intuitive, even for users not deeply familiar with graphic design or command-line tools. Clear visual feedback is important.</li> <li>Performance: The UI should be responsive. PDF generation, including rotation calculations, should be reasonably fast.</li> <li>Maintainability: Code should be well-organized (e.g., separating UI logic, data model/strip logic, and PDF generation/rotation logic).</li> <li>Error Handling: Graceful handling of invalid inputs or potential issues (e.g., text overflow in a cell might be indicated in the preview).</li> </ul>"},{"location":"projectbrief/#7-future-enhancements-possible-next-steps","title":"7. Future Enhancements (Possible Next Steps) \ud83d\ude80","text":"<ul> <li>Saving and loading label design projects/templates.</li> <li>More extensive color palettes or full RGB/HSV color pickers.</li> <li>Advanced text alignment options (Horizontal: Left, Center, Right; Vertical: Top, Middle, Bottom) per segment.</li> <li>Grid lines or cut marks on the PDF output to aid cutting.</li> <li>Option to print multiple different label strips on a single sheet, if space allows.</li> <li>Option to print multiple copies of the same label strip, optimally arranged on the sheet.</li> <li>Importing label text from CSV or text files.</li> <li>Undo/Redo functionality for design changes.</li> <li>User-definable list of common strip heights or cell widths.</li> </ul>"},{"location":"status/","title":"Project Status","text":""},{"location":"status/#current-status","title":"Current Status","text":"<p>The Jackfield Labeler project has reached a feature-complete beta state with all core functionality implemented and working. The application provides a fully functional interface for designing label strips and generating PDFs with proper rotation as needed.</p>"},{"location":"status/#completed-features","title":"\u2705 Completed Features","text":""},{"location":"status/#core-application-structure","title":"Core Application Structure","text":"<ul> <li>Main Application Window: Tabbed interface with Designer, Settings, and Preview tabs</li> <li>MVC Architecture: Clean separation of models, views, and utilities</li> <li>Project Structure: Well-organized codebase with ~3,500 lines of Python code</li> </ul>"},{"location":"status/#designer-tab","title":"Designer Tab","text":"<ul> <li>Segment Table: Editable properties for text, formatting, and colors</li> <li>Control Panel: Strip dimensions, content cell width, end label configuration</li> <li>Dynamic Management: Add/remove segments with automatic width updates</li> <li>Real-time Updates: UI responds immediately to model changes</li> </ul>"},{"location":"status/#settings-tab","title":"Settings Tab","text":"<ul> <li>Paper Configuration: Support for A0-A4, Letter, Legal, Tabloid (A3 default)</li> <li>Margin Control: Customizable page margins for optimal printing</li> <li>Rotation Settings: Configurable rotation angle (0\u00b0-360\u00b0) with preset buttons</li> <li>Default Formatting: Font selection, size, and default colors</li> </ul>"},{"location":"status/#preview-tab","title":"Preview Tab","text":"<ul> <li>Live Preview: Real-time visual representation of label strips</li> <li>Strip Information: Displays dimensions, segment count, and configuration</li> <li>Export Options: Direct PNG export with high resolution (300 DPI)</li> </ul>"},{"location":"status/#pdf-generation","title":"PDF Generation","text":"<ul> <li>ReportLab Integration: Professional PDF output with precise positioning</li> <li>Intelligent Rotation: Automatic rotation calculation based on strip dimensions</li> <li>Center-to-Center Positioning: Precise placement algorithm for consistent results</li> <li>Multiple Paper Sizes: Full support for standard paper formats</li> <li>Text Formatting: Bold, italic support with proper font selection</li> </ul>"},{"location":"status/#project-management","title":"Project Management","text":"<ul> <li>Save/Load System: <code>.jlp</code> format using JSON serialization</li> <li>Project State Tracking: Visual indicators for unsaved changes</li> <li>Error Handling: Robust handling of invalid project files</li> <li>File Dialogs: Proper filtering and user-friendly file operations</li> </ul>"},{"location":"status/#testing","title":"Testing","text":"<ul> <li>Test Suite: ~315 lines of tests covering core functionality</li> <li>Model Testing: Comprehensive tests for data structures</li> <li>PDF Generation Tests: Validation of output quality and rotation</li> <li>Project File Tests: Save/load functionality verification</li> </ul>"},{"location":"status/#in-progress-features","title":"\ud83d\udfe1 In-Progress Features","text":"<ul> <li>Preview Improvements: Enhanced visual representation of rotation on paper</li> <li>Multi-page Support: Handling for extra-large strips that don't fit on single pages</li> <li>Automatic Rotation: Optimization of rotation angle calculation</li> </ul>"},{"location":"status/#pending-features","title":"\u23f3 Pending Features","text":""},{"location":"status/#version-10-release-preparation","title":"Version 1.0 Release Preparation","text":"<ul> <li>Version Update: Update to version 1.0.0</li> <li>Executable Distribution: Create standalone executables for Windows/Mac/Linux</li> <li>Documentation: Complete user guide and API documentation</li> <li>UI Polish: Visual improvements and styling enhancements</li> </ul>"},{"location":"status/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Text Formatting in Save Files: Preserve formatting in project files</li> <li>Last Used Save Location: Remember previous save directories</li> <li>Environment Settings: Update configuration management</li> </ul>"},{"location":"status/#technical-achievements","title":"\ud83c\udfd7\ufe0f Technical Achievements","text":""},{"location":"status/#code-quality","title":"Code Quality","text":"<ul> <li>Type Hints: Comprehensive type annotations throughout the codebase</li> <li>Code Standards: PEP 8 compliance enforced by Ruff</li> <li>Documentation: Google-style docstrings for all public APIs</li> <li>Error Handling: Robust exception handling with custom error types</li> </ul>"},{"location":"status/#architecture","title":"Architecture","text":"<ul> <li>Clean Design: Well-separated concerns with clear interfaces</li> <li>Extensibility: Modular design allowing easy feature additions</li> <li>Maintainability: Clear code organization and consistent patterns</li> <li>Performance: Efficient algorithms for PDF generation and UI updates</li> </ul>"},{"location":"status/#user-experience","title":"User Experience","text":"<ul> <li>Intuitive Interface: Tabbed design with logical workflow</li> <li>Responsive UI: Real-time updates and immediate feedback</li> <li>Professional Output: High-quality PDFs suitable for commercial printing</li> <li>Cross-platform: Consistent experience on Windows, macOS, and Linux</li> </ul>"},{"location":"status/#project-metrics","title":"\ud83d\udcca Project Metrics","text":"<ul> <li>Codebase Size: ~3,500 lines of Python code</li> <li>Test Coverage: ~315 lines of tests</li> <li>Dependencies: 3 core dependencies (PyQt6, ReportLab, Markdown)</li> <li>Development Tools: UV, Ruff, pytest, pre-commit</li> <li>Documentation: Comprehensive guides and API reference</li> </ul>"},{"location":"status/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<ol> <li>Complete Version 1.0: Finalize remaining features and polish</li> <li>Create Executables: Build standalone distributions for all platforms</li> <li>Enhance Documentation: Complete user guide and developer documentation</li> <li>Community Release: Publish to PyPI and create GitHub releases</li> </ol>"},{"location":"status/#development-timeline","title":"\ud83d\udcc8 Development Timeline","text":"<ul> <li>Phase 1 \u2705: Core application structure and basic functionality</li> <li>Phase 2 \u2705: PDF generation and project management</li> <li>Phase 3 \u2705: UI polish and testing</li> <li>Phase 4 \ud83d\udd04: Version 1.0 preparation and distribution</li> <li>Phase 5 \u23f3: Community release and ongoing maintenance</li> </ul> <p>Last updated: August 2024</p>"},{"location":"technical/","title":"Technical Documentation","text":""},{"location":"technical/#project-overview","title":"Project Overview","text":"<p>The Jackfield Labeler is a professional desktop application for creating custom label strips for 19\" equipment rack jackfields, patch panels, and audio equipment. Built with Python and PyQt6, it provides an intuitive interface for designing labels with precise dimensions and professional output quality.</p>"},{"location":"technical/#architecture","title":"Architecture","text":""},{"location":"technical/#design-pattern-model-view-controller-mvc","title":"Design Pattern: Model-View-Controller (MVC)","text":"<p>The application follows a clean MVC architecture with PyQt6's signal-slot mechanism providing loose coupling between components:</p> <ul> <li>Models (<code>jackfield_labeler/models/</code>): Pure data structures and business logic</li> <li>Views (<code>jackfield_labeler/views/</code>): PyQt6-based user interface components</li> <li>Utils (<code>jackfield_labeler/utils/</code>): Specialized utilities for PDF generation, rendering, and file management</li> <li>Controllers (<code>jackfield_labeler/controllers/</code>): Minimal coordination layer (Qt handles most controller logic)</li> </ul>"},{"location":"technical/#signal-driven-communication","title":"Signal-Driven Communication","text":"<pre><code># Example signal flow\nLabelStrip.strip_changed.emit()  # Model emits change\n    \u2193\nMainWindow._on_strip_changed()   # Main window receives signal\n    \u2193\nPreviewTab.update_preview()      # Preview updates automatically\n</code></pre>"},{"location":"technical/#core-dependencies","title":"Core Dependencies","text":""},{"location":"technical/#runtime-dependencies","title":"Runtime Dependencies","text":"<ul> <li>Python: 3.12+ (required for modern type hints and performance)</li> <li>PyQt6: 6.9.0+ (cross-platform GUI framework)</li> <li>ReportLab: 4.4.1+ (professional PDF generation)</li> </ul>"},{"location":"technical/#development-dependencies","title":"Development Dependencies","text":"<ul> <li>UV: Modern Python package manager (replaces pip)</li> <li>pytest: Testing framework with coverage reporting</li> <li>mypy: Static type checking for code quality</li> <li>ruff: Fast Python linter and formatter</li> <li>pre-commit: Git hooks for code quality enforcement</li> </ul>"},{"location":"technical/#package-management","title":"Package Management","text":""},{"location":"technical/#uv-package-manager","title":"UV Package Manager","text":"<p>This project uses UV instead of pip for several advantages:</p> <pre><code># Add runtime dependency\nuv add package-name\n\n# Add development dependency\nuv add --group dev package-name\n\n# Install all dependencies\nuv sync\n\n# Run application\nuv run -m jackfield_labeler\n\n# Run tests\nuv run pytest\n</code></pre>"},{"location":"technical/#dependency-configuration","title":"Dependency Configuration","text":"<p>Dependencies are defined in <code>pyproject.toml</code>:</p> <pre><code>[project]\ndependencies = [\n    \"pyqt6&gt;=6.9.0\",\n    \"reportlab&gt;=4.4.1\",\n]\n\n[dependency-groups]\ndev = [\n    \"pytest&gt;=8.3.5\",\n    \"mypy&gt;=1.15\",\n    \"ruff&gt;=0.11.11\",\n    # ... other dev dependencies\n]\n</code></pre>"},{"location":"technical/#application-structure","title":"Application Structure","text":""},{"location":"technical/#directory-layout","title":"Directory Layout","text":"<pre><code>jackfield_labeler/\n\u251c\u2500\u2500 __init__.py              # Package initialization\n\u251c\u2500\u2500 __main__.py              # Entry point for -m execution\n\u251c\u2500\u2500 app.py                   # Application setup and configuration\n\u251c\u2500\u2500 models/                  # Data models and business logic\n\u2502   \u251c\u2500\u2500 __init__.py          # Model exports\n\u2502   \u251c\u2500\u2500 label_strip.py       # Core label strip model\n\u2502   \u251c\u2500\u2500 segment_types.py     # Segment implementations\n\u2502   \u251c\u2500\u2500 segment.py           # Base segment class\n\u2502   \u251c\u2500\u2500 strip_settings.py    # Configuration model\n\u2502   \u251c\u2500\u2500 color.py            # Color definitions and utilities\n\u2502   \u2514\u2500\u2500 text_format.py      # Text formatting enumerations\n\u251c\u2500\u2500 views/                   # User interface components\n\u2502   \u251c\u2500\u2500 __init__.py          # View exports\n\u2502   \u251c\u2500\u2500 main_window.py       # Main application window\n\u2502   \u251c\u2500\u2500 designer_tab.py      # Label design interface\n\u2502   \u251c\u2500\u2500 preview_tab.py       # Preview and export interface\n\u2502   \u2514\u2500\u2500 settings_tab.py      # Settings configuration\n\u251c\u2500\u2500 utils/                   # Utility modules\n\u2502   \u251c\u2500\u2500 __init__.py          # Utility exports\n\u2502   \u251c\u2500\u2500 pdf_generator.py     # PDF generation engine\n\u2502   \u251c\u2500\u2500 strip_renderer.py    # PNG rendering engine\n\u2502   \u2514\u2500\u2500 project_manager.py   # Project save/load functionality\n\u2514\u2500\u2500 controllers/             # Application logic coordination\n    \u2514\u2500\u2500 __init__.py          # Controller exports (minimal)\n</code></pre>"},{"location":"technical/#code-statistics","title":"Code Statistics","text":"<ul> <li>Total Application Code: ~3,300 lines</li> <li>Test Code: ~350 lines</li> <li>Documentation: ~2,000 lines</li> <li>Configuration: ~120 lines</li> </ul>"},{"location":"technical/#data-models","title":"Data Models","text":""},{"location":"technical/#labelstrip-modelslabel_strippy","title":"LabelStrip (<code>models/label_strip.py</code>)","text":"<p>The central data model representing a complete label strip design.</p> <pre><code>@dataclass\nclass LabelStrip(QObject):\n    height: float = 6.0\n    content_cell_width: float = 12.0\n    segments: List[Segment] = field(default_factory=list)\n    settings: StripSettings = field(default_factory=StripSettings)\n\n    # Signals for UI updates\n    strip_changed = pyqtSignal()\n    segment_added = pyqtSignal(int)\n    segment_removed = pyqtSignal(int)\n</code></pre> <p>Key Features: - Immutable design with builder pattern - Signal emission for UI updates - Automatic width calculation - Serialization support for project files</p>"},{"location":"technical/#segment-types-modelssegment_typespy","title":"Segment Types (<code>models/segment_types.py</code>)","text":"<p>Three types of segments with polymorphic behavior:</p> <pre><code>class StartSegment(Segment):\n    \"\"\"Optional start label (e.g., 'INPUT')\"\"\"\n\nclass ContentSegment(Segment):\n    \"\"\"Main content cells (e.g., 'CH1', 'CH2')\"\"\"\n\nclass EndSegment(Segment):\n    \"\"\"Optional end label (e.g., 'OUTPUT')\"\"\"\n</code></pre> <p>Design Patterns: - Factory pattern for creation from dictionaries - Strategy pattern for type-specific behavior - Builder pattern for complex construction</p>"},{"location":"technical/#stripsettings-modelsstrip_settingspy","title":"StripSettings (<code>models/strip_settings.py</code>)","text":"<p>Configuration model with comprehensive settings:</p> <pre><code>@dataclass\nclass StripSettings:\n    paper_size: PaperSize = PaperSize.A3\n    page_margins: PageMargins = field(default_factory=PageMargins)\n    rotation_angle: float = 60.0\n    default_font_name: str = \"Arial\"\n    default_font_size: float = 8.0\n    default_text_color: str = \"#000000\"\n    default_background_color: str = \"#FFFFFF\"\n</code></pre>"},{"location":"technical/#user-interface-architecture","title":"User Interface Architecture","text":""},{"location":"technical/#main-window-viewsmain_windowpy","title":"Main Window (<code>views/main_window.py</code>)","text":"<p>Central coordination point for the application:</p> <pre><code>class MainWindow(QMainWindow):\n    def __init__(self):\n        # Tab management\n        self.designer_tab = DesignerTab()\n        self.preview_tab = PreviewTab()\n        self.settings_tab = SettingsTab()\n\n        # Signal routing\n        self.designer_tab.strip_changed.connect(self.preview_tab.update_preview)\n        self.settings_tab.settings_changed.connect(self.designer_tab.apply_settings)\n</code></pre> <p>Responsibilities: - Tab coordination and signal routing - Menu bar and global actions - Project state management - File operations and dialogs</p>"},{"location":"technical/#designer-tab-viewsdesigner_tabpy","title":"Designer Tab (<code>views/designer_tab.py</code>)","text":"<p>Main workspace with sophisticated table management:</p> <pre><code>class DesignerTab(QWidget):\n    def __init__(self):\n        self.control_panel = self._create_control_panel()\n        self.segment_table = self._create_segment_table()\n        self.action_buttons = self._create_action_buttons()\n\n    def _create_segment_table(self):\n        \"\"\"Creates table with custom delegates for colors and formatting\"\"\"\n        table = QTableWidget()\n        table.setItemDelegate(ColorButtonDelegate())\n        return table\n</code></pre> <p>Key Features: - Custom table delegates for color pickers - Real-time validation and feedback - Dynamic row management - Signal emission for all changes</p>"},{"location":"technical/#preview-tab-viewspreview_tabpy","title":"Preview Tab (<code>views/preview_tab.py</code>)","text":"<p>Real-time preview with high-quality rendering:</p> <pre><code>class PreviewTab(QWidget):\n    def __init__(self):\n        self.preview_widget = StripPreviewWidget()\n        self.info_panel = StripInfoPanel()\n        self.export_controls = self._create_export_controls()\n\n    def update_preview(self, label_strip: LabelStrip):\n        \"\"\"Updates preview with auto-scaling\"\"\"\n        pixmap = self.renderer.render_to_pixmap(label_strip, self.scale_factor)\n        self.preview_widget.setPixmap(pixmap)\n</code></pre>"},{"location":"technical/#settings-tab-viewssettings_tabpy","title":"Settings Tab (<code>views/settings_tab.py</code>)","text":"<p>Comprehensive settings interface with grouped controls:</p> <pre><code>class SettingsTab(QWidget):\n    def __init__(self):\n        self.paper_group = PaperGroup()\n        self.rotation_group = RotationGroup()\n        self.font_group = FontGroup()\n        self.color_group = ColorGroup()\n</code></pre>"},{"location":"technical/#utility-modules","title":"Utility Modules","text":""},{"location":"technical/#pdf-generator-utilspdf_generatorpy","title":"PDF Generator (<code>utils/pdf_generator.py</code>)","text":"<p>Professional PDF generation with ReportLab:</p> <pre><code>class PDFGenerator:\n    def generate_pdf(self, label_strip: LabelStrip, filename: str,\n                    rotation_angle: float | None = None) -&gt; bool:\n        \"\"\"Generates high-quality PDF with precise positioning\"\"\"\n        c = canvas.Canvas(filename, pagesize=self.paper_size)\n\n        # Apply rotation and positioning\n        c.saveState()\n        c.translate(center_x, center_y)\n        c.rotate(rotation_angle)\n\n        # Render segments with exact dimensions\n        for segment in label_strip.segments:\n            self._draw_segment(c, segment, x_offset)\n\n        c.restoreState()\n        c.save()\n</code></pre> <p>Technical Features: - No automatic scaling (preserves exact dimensions) - Center-to-center positioning algorithm - Support for all standard paper sizes - Color space conversion (RGB to ReportLab format) - Font handling with fallbacks</p>"},{"location":"technical/#strip-renderer-utilsstrip_rendererpy","title":"Strip Renderer (<code>utils/strip_renderer.py</code>)","text":"<p>High-quality PNG rendering with Qt:</p> <pre><code>class StripRenderer:\n    def render_to_pixmap(self, label_strip: LabelStrip,\n                        scale_factor: float = 1.0) -&gt; QPixmap:\n        \"\"\"Renders strip to QPixmap for preview or export\"\"\"\n        width_px = int(total_width_mm * self.pixels_per_mm * scale_factor)\n        height_px = int(label_strip.height * self.pixels_per_mm * scale_factor)\n\n        pixmap = QPixmap(width_px, height_px)\n        painter = QPainter(pixmap)\n        painter.setRenderHint(QPainter.RenderHint.Antialiasing)\n\n        # Render each segment\n        for segment in label_strip.segments:\n            self._draw_segment(painter, segment, x_offset, scale_factor)\n</code></pre> <p>Features: - Configurable DPI (default 300 for print quality) - Anti-aliased rendering - Scalable output for different use cases - Qt-based rendering pipeline</p>"},{"location":"technical/#project-manager-utilsproject_managerpy","title":"Project Manager (<code>utils/project_manager.py</code>)","text":"<p>Robust project file management:</p> <pre><code>class ProjectManager:\n    @staticmethod\n    def save_project(label_strip: LabelStrip, filename: str) -&gt; bool:\n        \"\"\"Saves project in JSON format with validation\"\"\"\n        project_data = {\n            \"version\": \"1.0\",\n            \"application\": \"Jackfield Labeler\",\n            \"label_strip\": label_strip.to_dict(),\n            \"metadata\": {\n                \"created_by\": \"Jackfield Labeler\",\n                \"file_format_version\": \"1.0\"\n            }\n        }\n\n        with open(filename, 'w') as f:\n            json.dump(project_data, f, indent=2)\n</code></pre> <p>File Format Features: - JSON-based for human readability - Version control for future compatibility - Comprehensive validation - Error handling and recovery</p>"},{"location":"technical/#technical-decisions","title":"Technical Decisions","text":""},{"location":"technical/#1-pyqt6-vs-other-gui-frameworks","title":"1. PyQt6 vs Other GUI Frameworks","text":"<p>Chosen: PyQt6 Rationale: - Mature, stable framework with excellent documentation - Native look and feel on all platforms - Powerful signal-slot mechanism for loose coupling - Rich widget set including advanced table features - Professional licensing available</p>"},{"location":"technical/#2-reportlab-vs-other-pdf-libraries","title":"2. ReportLab vs Other PDF Libraries","text":"<p>Chosen: ReportLab Rationale: - Industry standard for professional PDF generation - Precise control over positioning and graphics - Excellent font handling and color management - Vector-based output for scalability - Extensive documentation and community support</p>"},{"location":"technical/#3-uv-vs-pip-for-package-management","title":"3. UV vs pip for Package Management","text":"<p>Chosen: UV Rationale: - Significantly faster than pip - Better dependency resolution - Built-in virtual environment management - Modern approach to Python packaging - Excellent compatibility with existing tools</p>"},{"location":"technical/#4-json-vs-binary-for-project-files","title":"4. JSON vs Binary for Project Files","text":"<p>Chosen: JSON Rationale: - Human-readable for debugging and inspection - Version control friendly - Easy to parse and validate - Cross-platform compatibility - Future-proof format</p>"},{"location":"technical/#5-signal-slot-vs-direct-method-calls","title":"5. Signal-Slot vs Direct Method Calls","text":"<p>Chosen: Signal-Slot Rationale: - Loose coupling between components - Automatic UI updates - Thread-safe communication - Extensible for future features - Qt's recommended pattern</p>"},{"location":"technical/#performance-considerations","title":"Performance Considerations","text":""},{"location":"technical/#1-preview-rendering-optimization","title":"1. Preview Rendering Optimization","text":"<pre><code>class PreviewTab:\n    def __init__(self):\n        self._preview_cache = {}\n        self._update_timer = QTimer()\n        self._update_timer.setSingleShot(True)\n        self._update_timer.timeout.connect(self._do_update_preview)\n\n    def update_preview(self):\n        \"\"\"Debounced preview updates to avoid excessive rendering\"\"\"\n        self._update_timer.start(100)  # 100ms delay\n</code></pre>"},{"location":"technical/#2-memory-management","title":"2. Memory Management","text":"<ul> <li>Pixmap caching for preview rendering</li> <li>Automatic cleanup of temporary objects</li> <li>Efficient signal/slot connections</li> <li>Lazy loading of UI components</li> </ul>"},{"location":"technical/#3-startup-performance","title":"3. Startup Performance","text":"<ul> <li>Minimal imports in <code>__init__.py</code></li> <li>Deferred widget creation</li> <li>Fast application startup (~1-2 seconds)</li> </ul>"},{"location":"technical/#testing-strategy","title":"Testing Strategy","text":""},{"location":"technical/#unit-tests-tests","title":"Unit Tests (<code>tests/</code>)","text":"<pre><code>def test_label_strip_width_calculation():\n    \"\"\"Test that total width is calculated correctly\"\"\"\n    strip = LabelStrip(content_cell_width=10.0)\n    strip.add_content_segment(\"CH1\")\n    strip.add_content_segment(\"CH2\")\n\n    assert strip.get_total_width() == 20.0\n</code></pre> <p>Coverage Areas: - Model logic and calculations - Utility functions - File format validation - Color conversion algorithms</p>"},{"location":"technical/#integration-tests","title":"Integration Tests","text":"<pre><code>def test_pdf_generation_integration():\n    \"\"\"Test complete PDF generation workflow\"\"\"\n    strip = create_test_strip()\n    generator = PDFGenerator()\n\n    success = generator.generate_pdf(strip, \"test.pdf\")\n    assert success\n    assert os.path.exists(\"test.pdf\")\n</code></pre>"},{"location":"technical/#test-configuration","title":"Test Configuration","text":"<pre><code>[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\naddopts = \"--cov=jackfield_labeler --cov-report=html\"\n\n[tool.coverage.run]\nbranch = true\nsource = [\"jackfield_labeler\"]\n</code></pre>"},{"location":"technical/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"technical/#type-checking-with-mypy","title":"Type Checking with mypy","text":"<pre><code>[tool.mypy]\nfiles = [\"jackfield_labeler\"]\ndisallow_untyped_defs = true\ndisallow_any_unimported = true\nno_implicit_optional = true\ncheck_untyped_defs = true\nwarn_return_any = true\nwarn_unused_ignores = true\nshow_error_codes = true\n</code></pre>"},{"location":"technical/#linting-with-ruff","title":"Linting with ruff","text":"<pre><code>[tool.ruff]\ntarget-version = \"py312\"\nline-length = 120\nfix = true\n\n[tool.ruff.lint]\nselect = [\n    \"E\", \"W\",    # pycodestyle\n    \"F\",         # pyflakes\n    \"I\",         # isort\n    \"B\",         # flake8-bugbear\n    \"C4\",        # flake8-comprehensions\n    \"UP\",        # pyupgrade\n    \"RUF\",       # ruff-specific rules\n]\n</code></pre>"},{"location":"technical/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code>repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.6\n    hooks:\n      - id: ruff\n        args: [--fix]\n      - id: ruff-format\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.7.1\n    hooks:\n      - id: mypy\n</code></pre>"},{"location":"technical/#security-considerations","title":"Security Considerations","text":""},{"location":"technical/#1-file-handling-security","title":"1. File Handling Security","text":"<pre><code>def validate_project_file(filename: str) -&gt; bool:\n    \"\"\"Validates project file before loading\"\"\"\n    if not filename.endswith('.jlp'):\n        return False\n\n    try:\n        with open(filename, 'r') as f:\n            data = json.load(f)\n        return validate_project_structure(data)\n    except (json.JSONDecodeError, IOError):\n        return False\n</code></pre>"},{"location":"technical/#2-input-validation","title":"2. Input Validation","text":"<ul> <li>All user inputs are validated at the UI level</li> <li>Model-level validation for business logic</li> <li>Range checking for numeric inputs</li> <li>Text sanitization for file operations</li> </ul>"},{"location":"technical/#3-pdf-generation-security","title":"3. PDF Generation Security","text":"<ul> <li>Safe text rendering (no code execution)</li> <li>Resource limits for large documents</li> <li>Error containment and recovery</li> <li>Temporary file cleanup</li> </ul>"},{"location":"technical/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"technical/#1-cross-platform-compatibility","title":"1. Cross-Platform Compatibility","text":"<p>Supported Platforms: - Windows 10/11 (x64) - macOS 10.15+ (Intel and Apple Silicon) - Linux (Ubuntu 20.04+, other distributions)</p>"},{"location":"technical/#2-distribution-methods","title":"2. Distribution Methods","text":"<p>Current: Source distribution with UV Future: - PyInstaller executables - Platform-specific packages (MSI, DMG, DEB) - Snap/Flatpak packages</p>"},{"location":"technical/#3-system-requirements","title":"3. System Requirements","text":"<p>Minimum: - Python 3.12+ - 512MB RAM - 100MB disk space - Display: 1024x768</p> <p>Recommended: - Python 3.12+ - 2GB RAM - 500MB disk space - Display: 1920x1080</p>"},{"location":"technical/#future-technical-enhancements","title":"Future Technical Enhancements","text":""},{"location":"technical/#1-plugin-architecture","title":"1. Plugin Architecture","text":"<pre><code>class PluginInterface:\n    def get_segment_types(self) -&gt; List[Type[Segment]]:\n        \"\"\"Return custom segment types\"\"\"\n\n    def get_export_formats(self) -&gt; List[ExportFormat]:\n        \"\"\"Return custom export formats\"\"\"\n</code></pre>"},{"location":"technical/#2-advanced-rendering","title":"2. Advanced Rendering","text":"<ul> <li>3D preview capabilities</li> <li>Print simulation with color management</li> <li>Advanced typography features</li> <li>Custom font embedding</li> </ul>"},{"location":"technical/#3-performance-optimizations","title":"3. Performance Optimizations","text":"<ul> <li>Multi-threaded rendering</li> <li>GPU acceleration for preview</li> <li>Incremental updates</li> <li>Background processing</li> </ul>"},{"location":"technical/#4-cloud-integration","title":"4. Cloud Integration","text":"<ul> <li>Project synchronization</li> <li>Collaborative editing</li> <li>Template sharing</li> <li>Online backup</li> </ul>"},{"location":"technical/#debugging-and-diagnostics","title":"Debugging and Diagnostics","text":""},{"location":"technical/#1-logging-configuration","title":"1. Logging Configuration","text":"<pre><code>import logging\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('logs/jackfield_labeler.log'),\n        logging.StreamHandler()\n    ]\n)\n</code></pre>"},{"location":"technical/#2-debug-mode","title":"2. Debug Mode","text":"<pre><code># Enable debug mode\nexport JACKFIELD_DEBUG=1\nuv run -m jackfield_labeler\n</code></pre>"},{"location":"technical/#3-performance-profiling","title":"3. Performance Profiling","text":"<pre><code># Profile critical sections\nimport cProfile\nimport pstats\n\ndef profile_pdf_generation():\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    # PDF generation code\n\n    profiler.disable()\n    stats = pstats.Stats(profiler)\n    stats.sort_stats('cumulative')\n    stats.print_stats()\n</code></pre>"},{"location":"technical/#maintenance-and-updates","title":"Maintenance and Updates","text":""},{"location":"technical/#1-dependency-updates","title":"1. Dependency Updates","text":"<pre><code># Check for outdated dependencies\nuv pip list --outdated\n\n# Update dependencies\nuv sync --upgrade\n</code></pre>"},{"location":"technical/#2-code-quality-monitoring","title":"2. Code Quality Monitoring","text":"<pre><code># Run all quality checks\nmake lint\nmake typecheck\nmake test\nmake coverage\n</code></pre>"},{"location":"technical/#3-documentation-updates","title":"3. Documentation Updates","text":"<ul> <li>Keep documentation in sync with code changes</li> <li>Update API documentation automatically</li> <li>Maintain changelog for releases</li> <li>Review and update user guide regularly</li> </ul>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Getting Started</li> <li>Application Overview</li> <li>Designer Tab</li> <li>Preview Tab</li> <li>Settings Tab</li> <li>File Operations</li> <li>Export Options</li> <li>Tips and Best Practices</li> <li>Troubleshooting</li> </ol>"},{"location":"user-guide/#getting-started","title":"Getting Started","text":""},{"location":"user-guide/#first-launch","title":"First Launch","text":"<p>When you first launch Jackfield Labeler, you'll see the main window with three tabs:</p> <ul> <li>Designer: Where you create your label strips</li> <li>Preview: Where you see a visual representation of your label</li> <li>Settings: Where you configure global settings</li> </ul> <p>The application starts with a default label strip configuration that you can immediately modify.</p>"},{"location":"user-guide/#quick-start-tutorial","title":"Quick Start Tutorial","text":"<p>Let's create your first label strip:</p> <ol> <li>Set Strip Dimensions</li> <li>In the Designer tab, set \"Strip Height\" to <code>6.0</code> mm</li> <li>Set \"Content Cell Width\" to <code>12.0</code> mm</li> <li> <p>Set \"Number of Content Cells\" to <code>4</code></p> </li> <li> <p>Add Content</p> </li> <li>In the segment table, enter text for each cell: \"CH1\", \"CH2\", \"CH3\", \"CH4\"</li> <li>Choose different background colors for each channel</li> <li> <p>Keep text color as black for readability</p> </li> <li> <p>Preview Your Design</p> </li> <li>Click the \"Preview\" tab to see your label</li> <li> <p>The preview updates automatically as you make changes</p> </li> <li> <p>Generate PDF</p> </li> <li>Go to File \u2192 Generate PDF or click the \"Generate PDF\" button</li> <li>Choose a location to save your PDF</li> <li>Your label will be generated with the current settings</li> </ol>"},{"location":"user-guide/#application-overview","title":"Application Overview","text":""},{"location":"user-guide/#main-window-components","title":"Main Window Components","text":"<ul> <li>Menu Bar: File operations, export options, and help</li> <li>Tab Widget: Three main tabs for different functions</li> <li>Status Bar: Shows current operation status and feedback</li> <li>Window Title: Displays current project name and modification status</li> </ul>"},{"location":"user-guide/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li>Ctrl+N: New project</li> <li>Ctrl+O: Open project</li> <li>Ctrl+S: Save project</li> <li>Ctrl+Shift+S: Save project as</li> <li>F5: Generate PDF</li> <li>F6: Export PNG</li> </ul>"},{"location":"user-guide/#project-state-tracking","title":"Project State Tracking","text":"<p>The application tracks your project state:</p> <ul> <li>Window Title: Shows project name with \"*\" for unsaved changes</li> <li>Status Messages: Confirmation and error messages</li> <li>Auto-Save Prompts: Warns before losing unsaved work</li> </ul>"},{"location":"user-guide/#designer-tab","title":"Designer Tab","text":"<p>The Designer tab is your main workspace for creating label strips.</p>"},{"location":"user-guide/#control-panel","title":"Control Panel","text":"<p>Located at the top of the Designer tab, the control panel contains global settings for your label strip:</p>"},{"location":"user-guide/#strip-dimensions","title":"Strip Dimensions","text":"<ul> <li>Strip Height (mm): The overall height of your label strip</li> <li>Typical values: 5-12mm for jackfield labels</li> <li>Supports one decimal place (e.g., 6.5mm)</li> <li>Range: 5.0mm to 12.0mm (enforced by validation)</li> <li> <p>Default: 5.0mm</p> </li> <li> <p>Content Cell Width (mm): Uniform width for all content segments</p> </li> <li>Typical values: 8-15mm depending on text length</li> <li>Supports three decimal places for precision</li> <li>Range: Must be positive (no upper limit)</li> <li> <p>Default: 10.0mm</p> </li> <li> <p>End Label Width (mm): Width of the optional end label</p> </li> <li>Set to 0 to disable the end label</li> <li>Supports three decimal places</li> <li>Range: 0.0mm or positive values</li> <li>Default: 0.0mm (disabled)</li> </ul>"},{"location":"user-guide/#content-management","title":"Content Management","text":"<ul> <li>Number of Content Cells: How many main content segments to create</li> <li>Range: 0 to unlimited (practical limit ~50 for usability)</li> <li>Use spin box controls or type directly</li> <li>Changes are applied immediately</li> <li> <p>Default: 0 (empty strip)</p> </li> <li> <p>End Label Text: Text for the end label segment</p> </li> <li>Only visible when End Label Width &gt; 0</li> <li>Supports all text formatting options</li> <li>Updates the end segment automatically</li> <li>Default: Empty string</li> </ul>"},{"location":"user-guide/#display-information","title":"Display Information","text":"<ul> <li>Total Strip Width: Automatically calculated and displayed</li> <li>Shows the sum of all segment widths</li> <li>Updates in real-time as you change dimensions</li> <li>Helps you plan for paper size requirements</li> <li>Maximum total width: 500.0mm</li> </ul>"},{"location":"user-guide/#segment-table","title":"Segment Table","text":"<p>The segment table provides a spreadsheet-like interface for editing individual segments:</p>"},{"location":"user-guide/#table-columns","title":"Table Columns","text":"<ol> <li>Segment: Read-only identifier</li> <li>Content segments numbered 1, 2, 3, etc.</li> <li>End segment labeled \"L_END\" (when present)</li> <li> <p>Cannot be edited directly</p> </li> <li> <p>Text: The text to display on each segment</p> </li> <li>Click to edit directly</li> <li>Supports Unicode characters</li> <li>No length limit, but consider readability</li> <li> <p>Empty text is allowed</p> </li> <li> <p>Text Format: Formatting options for the text</p> </li> <li>Normal: Standard text (default)</li> <li>Bold: Bold text for emphasis</li> <li>Italic: Italic text for style</li> <li> <p>Choose from dropdown menu</p> </li> <li> <p>Text Color: Color of the text</p> </li> <li>Click the color button to open color picker</li> <li>Standard colors: Black, White, Red, Green, Blue, Yellow, Orange, Purple</li> <li>Custom colors available through color dialog</li> <li> <p>Default: Black (#000000)</p> </li> <li> <p>Background Color: Background color of the segment</p> </li> <li>Click the color button to open color picker</li> <li>Same color options as text color</li> <li>Consider contrast with text color for readability</li> <li>Default: White (#FFFFFF)</li> </ol>"},{"location":"user-guide/#table-operations","title":"Table Operations","text":"<ul> <li>Add Row: Click \"Add Row\" button to add new content segments</li> <li>Remove Row: Select a row and click \"Remove Row\" to delete it</li> <li>Direct Editing: Click any cell to edit its value</li> <li>Tab Navigation: Use Tab key to move between cells</li> <li>Enter Confirmation: Press Enter to confirm changes</li> <li>Color Picker: Click color buttons to open color selection dialog</li> </ul>"},{"location":"user-guide/#table-behavior","title":"Table Behavior","text":"<ul> <li>Real-time Updates: Changes are applied immediately</li> <li>Validation: Invalid inputs are highlighted and prevented</li> <li>Auto-Resize: Table adjusts to content automatically</li> <li>Selection: Single row selection for operations</li> </ul>"},{"location":"user-guide/#action-buttons","title":"Action Buttons","text":"<p>Located at the bottom of the Designer tab:</p> <ul> <li>Add Row: Adds a new content segment to the table</li> <li>Uses default colors from settings</li> <li>Increments segment numbering automatically</li> <li> <p>Updates total width calculation</p> </li> <li> <p>Remove Row: Removes the selected segment from the table</p> </li> <li>Requires a row to be selected</li> <li>Cannot remove if no segments exist</li> <li> <p>Updates segment numbering automatically</p> </li> <li> <p>Generate PDF: Creates a PDF file of your label strip</p> </li> <li>Uses current settings for paper size and rotation</li> <li>Opens file dialog for save location</li> <li> <p>Shows progress and confirmation messages</p> </li> <li> <p>Save: Saves your current project</p> </li> <li>Uses existing filename or prompts for new one</li> <li>Saves in .jlp format with all settings</li> <li> <p>Updates window title and project state</p> </li> <li> <p>Load: Loads a previously saved project</p> </li> <li>Opens file dialog for .jlp files</li> <li>Validates file format before loading</li> <li>Prompts to save current project if modified</li> </ul>"},{"location":"user-guide/#preview-tab","title":"Preview Tab","text":"<p>The Preview tab provides real-time visualization of your label strip design.</p>"},{"location":"user-guide/#strip-information-panel","title":"Strip Information Panel","text":"<p>Located at the top of the Preview tab, this panel shows:</p> <ul> <li>Dimensions: Current strip width \u00d7 height in millimeters</li> <li>Format: \"XXX.X \u00d7 XX.X mm\"</li> <li>Updates automatically when strip changes</li> <li> <p>Helps verify dimensions before printing</p> </li> <li> <p>Segments: Total number of segments in your strip</p> </li> <li>Includes content segments and end segment (if present)</li> <li>Does not include start segment (not currently used)</li> <li> <p>Format: \"X segments\"</p> </li> <li> <p>End Text: Text of the end label (if present)</p> </li> <li>Shows actual text content</li> <li>Only displayed when end segment exists</li> <li>Format: \"End: 'TEXT'\"</li> </ul>"},{"location":"user-guide/#visual-preview","title":"Visual Preview","text":"<p>The main preview area shows a scaled representation of your label:</p>"},{"location":"user-guide/#preview-features","title":"Preview Features","text":"<ul> <li>Auto-scaling: Automatically scales to fit the available space</li> <li>Real-time Updates: Changes immediately when you modify the design</li> <li>Scrollable: Use scroll bars for very large labels</li> <li>Responsive: Adapts to window resizing</li> <li>High Quality: Anti-aliased rendering for smooth appearance</li> </ul>"},{"location":"user-guide/#preview-rendering","title":"Preview Rendering","text":"<ul> <li>Scale Calculation: Automatically determines best fit</li> <li>Aspect Ratio: Maintains correct proportions</li> <li>Color Accuracy: Shows actual colors as they will appear</li> <li>Text Rendering: Shows actual fonts and formatting</li> </ul>"},{"location":"user-guide/#preview-controls","title":"Preview Controls","text":"<ul> <li>Zoom: The preview automatically calculates the best zoom level</li> <li>Scroll: Use scroll bars to navigate large labels that exceed window size</li> <li>Resize: Resize the window to see different scale factors</li> <li>Refresh: Preview updates automatically, no manual refresh needed</li> </ul>"},{"location":"user-guide/#export-controls","title":"Export Controls","text":"<ul> <li>Export PNG: Creates a high-resolution PNG file</li> <li>Fixed at 300 DPI for professional quality</li> <li>No rotation applied - exact strip dimensions</li> <li>Suitable for digital documentation</li> <li>Opens file dialog for save location</li> </ul>"},{"location":"user-guide/#png-export-features","title":"PNG Export Features","text":"<ul> <li>High Resolution: 300 DPI for print quality</li> <li>Exact Dimensions: No scaling or rotation applied</li> <li>Transparency: White background for easy integration</li> <li>Color Accuracy: Maintains exact colors from design</li> </ul>"},{"location":"user-guide/#settings-tab","title":"Settings Tab","text":"<p>The Settings tab configures global options that affect all label generation.</p>"},{"location":"user-guide/#paper-settings","title":"Paper Settings","text":""},{"location":"user-guide/#paper-size","title":"Paper Size","text":"<p>Choose from standard paper sizes:</p> <ul> <li>A0: 841 \u00d7 1189 mm (largest)</li> <li>A1: 594 \u00d7 841 mm</li> <li>A2: 420 \u00d7 594 mm</li> <li>A3: 297 \u00d7 420 mm (default)</li> <li>A4: 210 \u00d7 297 mm</li> <li>Letter: 216 \u00d7 279 mm</li> <li>Legal: 216 \u00d7 356 mm</li> <li>Tabloid: 279 \u00d7 432 mm</li> </ul> <p>Selection Guidelines:</p> <ul> <li>A3: Best for most jackfield labels (default)</li> <li>A4: For smaller labels or when A3 not available</li> <li>Larger sizes: For very long strips or multiple strips per page</li> </ul>"},{"location":"user-guide/#page-margins","title":"Page Margins","text":"<p>Set margins for PDF output:</p> <ul> <li>Top: Space from top edge of paper</li> <li>Right: Space from right edge of paper</li> <li>Bottom: Space from bottom edge of paper</li> <li>Left: Space from left edge of paper</li> <li>Default: 10mm on all sides</li> <li>Range: 0-50mm per margin</li> <li>Units: Millimeters</li> </ul> <p>Margin Guidelines:</p> <ul> <li>10mm: Standard for most printers</li> <li>5mm: Minimum for most printers</li> <li>15-20mm: Conservative for older printers</li> <li>0mm: Only if printer supports borderless printing</li> </ul>"},{"location":"user-guide/#rotation-settings","title":"Rotation Settings","text":""},{"location":"user-guide/#rotation-angle","title":"Rotation Angle","text":"<ul> <li>Custom Angle: Set any angle from -360\u00b0 to +360\u00b0</li> <li>Default: 60\u00b0 (optimized for long strips on A3 paper)</li> <li>Precision: Supports decimal degrees</li> <li>Input: Spin box or direct text entry</li> </ul> <p>Rotation Guidelines:</p> <ul> <li>0\u00b0: Horizontal orientation (no rotation)</li> <li>60\u00b0: Optimal for long strips on A3 paper</li> <li>90\u00b0: Vertical orientation</li> <li>45\u00b0: Diagonal for maximum length</li> </ul>"},{"location":"user-guide/#preset-buttons","title":"Preset Buttons","text":"<p>Quick access to common rotations:</p> <ul> <li>0\u00b0: No rotation (horizontal)</li> <li>90\u00b0: Quarter turn (vertical)</li> <li>180\u00b0: Half turn (upside down)</li> <li>270\u00b0: Three-quarter turn</li> </ul> <p>When to Use Presets:</p> <ul> <li>0\u00b0: Short strips that fit horizontally</li> <li>90\u00b0: When you want vertical orientation</li> <li>180\u00b0: Special cases or testing</li> <li>270\u00b0: Alternative vertical orientation</li> </ul>"},{"location":"user-guide/#font-settings","title":"Font Settings","text":""},{"location":"user-guide/#default-font","title":"Default Font","text":"<ul> <li>Font Family: Choose from system fonts</li> <li>Font Size: Default size in points (typical: 8-12pt)</li> <li>Preview: Shows sample text with selected font</li> <li>System Fonts: Uses fonts installed on your system</li> </ul> <p>Font Selection:</p> <ul> <li>Arial: Good general-purpose font (default)</li> <li>Helvetica: Clean, professional appearance</li> <li>Times: Traditional serif font</li> <li>Courier: Monospace for technical labels</li> </ul>"},{"location":"user-guide/#font-configuration","title":"Font Configuration","text":"<ul> <li>Click \"Select Font\" to open font dialog</li> <li>Preview shows how text will appear</li> <li>Changes apply to new segments only</li> <li>Existing segments retain their current formatting</li> </ul>"},{"location":"user-guide/#default-colors","title":"Default Colors","text":""},{"location":"user-guide/#default-text-color","title":"Default Text Color","text":"<ul> <li>Sets the text color for new segments</li> <li>Existing segments are not changed</li> <li>Choose from standard palette or custom colors</li> <li>Default: Black (#000000)</li> </ul> <p>Text Color Guidelines:</p> <ul> <li>Black: Maximum readability on light backgrounds</li> <li>White: For dark backgrounds</li> <li>Dark colors: Generally better for readability</li> <li>Bright colors: Use sparingly for emphasis</li> </ul>"},{"location":"user-guide/#default-background-color","title":"Default Background Color","text":"<ul> <li>Sets the background color for new segments</li> <li>Existing segments are not changed</li> <li>Consider contrast with text color</li> <li>Default: White (#FFFFFF)</li> </ul> <p>Background Color Guidelines:</p> <ul> <li>White: Clean, professional appearance</li> <li>Light colors: Good for color coding</li> <li>Dark colors: Use with white or light text</li> <li>High contrast: Essential for readability</li> </ul>"},{"location":"user-guide/#settings-application","title":"Settings Application","text":"<ul> <li>Immediate Effect: Most settings apply immediately</li> <li>New Segments: Color and font defaults affect new segments only</li> <li>Global Settings: Paper size, margins, and rotation affect all output</li> <li>Persistence: Settings are saved with your project</li> </ul>"},{"location":"user-guide/#file-operations","title":"File Operations","text":""},{"location":"user-guide/#project-management","title":"Project Management","text":""},{"location":"user-guide/#new-project","title":"New Project","text":"<ul> <li>Menu: File \u2192 New</li> <li>Shortcut: Ctrl+N</li> <li>Action: Creates a fresh label strip with default settings</li> <li>Warning: Prompts to save unsaved changes</li> <li>Result: Empty strip ready for design</li> </ul>"},{"location":"user-guide/#open-project","title":"Open Project","text":"<ul> <li>Menu: File \u2192 Open</li> <li>Shortcut: Ctrl+O</li> <li>File Type: <code>.jlp</code> (Jackfield Labeler Project) files</li> <li>Action: Loads a previously saved project</li> <li>Warning: Prompts to save unsaved changes</li> <li>Validation: Checks file format before loading</li> </ul>"},{"location":"user-guide/#save-project","title":"Save Project","text":"<ul> <li>Menu: File \u2192 Save</li> <li>Shortcut: Ctrl+S</li> <li>Action: Saves to current file or prompts for new file</li> <li>Format: JSON-based <code>.jlp</code> format</li> <li>Content: Complete project including settings</li> </ul>"},{"location":"user-guide/#save-project-as","title":"Save Project As","text":"<ul> <li>Menu: File \u2192 Save As</li> <li>Shortcut: Ctrl+Shift+S</li> <li>Action: Always prompts for new file location</li> <li>Use Case: Creating copies or renaming projects</li> <li>Result: New file created, becomes current project</li> </ul>"},{"location":"user-guide/#project-file-format","title":"Project File Format","text":"<p>Jackfield Labeler uses <code>.jlp</code> files with the following features:</p>"},{"location":"user-guide/#file-structure","title":"File Structure","text":"<pre><code>{\n  \"version\": \"1.0\",\n  \"application\": \"Jackfield Labeler\",\n  \"label_strip\": {\n    \"height\": 6.0,\n    \"content_cell_width\": 12.0,\n    \"segments\": [\n      {\n        \"type\": \"content\",\n        \"id\": \"1\",\n        \"width\": 12.0,\n        \"text\": \"CH1\",\n        \"text_color\": \"#000000\",\n        \"background_color\": \"#FFFF00\",\n        \"text_format\": \"NORMAL\"\n      }\n    ],\n    \"settings\": {\n      \"paper_size\": \"A3\",\n      \"rotation_angle\": 60.0,\n      \"default_font_name\": \"Arial\",\n      \"default_font_size\": 8.0\n    }\n  },\n  \"metadata\": {\n    \"created_by\": \"Jackfield Labeler\",\n    \"file_format_version\": \"1.0\"\n  }\n}\n</code></pre>"},{"location":"user-guide/#benefits","title":"Benefits","text":"<ul> <li>Human-readable: JSON format for easy inspection</li> <li>Version control: Works well with Git and other VCS</li> <li>Portable: Share projects between users and systems</li> <li>Future-proof: Versioned format for compatibility</li> <li>Editable: Can be modified with text editors if needed</li> </ul>"},{"location":"user-guide/#project-state-tracking_1","title":"Project State Tracking","text":"<p>The application tracks your project state:</p>"},{"location":"user-guide/#window-title","title":"Window Title","text":"<ul> <li>Shows current project name</li> <li>Displays \"*\" for unsaved changes</li> <li>Updates automatically</li> <li>Format: \"Jackfield Labeler - [project.jlp]*\"</li> </ul>"},{"location":"user-guide/#status-messages","title":"Status Messages","text":"<ul> <li>Confirmation when files are saved</li> <li>Error messages for file problems</li> <li>Progress updates for long operations</li> <li>User feedback for all operations</li> </ul>"},{"location":"user-guide/#file-validation","title":"File Validation","text":"<ul> <li>Checks file format before loading</li> <li>Validates JSON structure</li> <li>Verifies required fields</li> <li>Provides helpful error messages</li> </ul>"},{"location":"user-guide/#export-options","title":"Export Options","text":""},{"location":"user-guide/#pdf-generation","title":"PDF Generation","text":""},{"location":"user-guide/#access-methods","title":"Access Methods","text":"<ul> <li>Menu: File \u2192 Generate PDF</li> <li>Button: \"Generate PDF\" in Designer tab</li> <li>Shortcut: F5</li> </ul>"},{"location":"user-guide/#pdf-features","title":"PDF Features","text":"<ul> <li>High Quality: Vector-based output for crisp printing</li> <li>Exact Dimensions: No scaling - preserves precise measurements</li> <li>Smart Rotation: Uses rotation angle from settings</li> <li>Professional Output: Ready for commercial printing</li> <li>Center Positioning: Optimal placement on paper</li> </ul>"},{"location":"user-guide/#pdf-process","title":"PDF Process","text":"<ol> <li>Click Generate PDF</li> <li>Choose file location and name</li> <li>PDF is created with current settings</li> <li>Confirmation message shows success</li> <li>File is ready for printing</li> </ol>"},{"location":"user-guide/#pdf-technical-details","title":"PDF Technical Details","text":"<ul> <li>Format: Standard PDF 1.4</li> <li>Resolution: Vector-based (infinite resolution)</li> <li>Colors: RGB color space</li> <li>Fonts: Embedded for consistency</li> <li>Size: Typically 1-5KB for most labels</li> </ul>"},{"location":"user-guide/#png-export","title":"PNG Export","text":""},{"location":"user-guide/#access-methods_1","title":"Access Methods","text":"<ul> <li>Menu: File \u2192 Export PNG</li> <li>Button: \"Export PNG\" in Preview tab</li> <li>Shortcut: F6</li> </ul>"},{"location":"user-guide/#png-features","title":"PNG Features","text":"<ul> <li>High Resolution: 300 DPI for professional quality</li> <li>No Rotation: Exact strip dimensions</li> <li>Digital Use: Perfect for documentation and digital sharing</li> <li>Transparency: White background for easy integration</li> <li>Color Accuracy: Maintains exact colors from design</li> </ul>"},{"location":"user-guide/#png-process","title":"PNG Process","text":"<ol> <li>Click Export PNG</li> <li>Choose file location and name</li> <li>PNG is created at 300 DPI</li> <li>Confirmation message shows success</li> <li>File is ready for digital use</li> </ol>"},{"location":"user-guide/#png-technical-details","title":"PNG Technical Details","text":"<ul> <li>Resolution: 300 DPI (dots per inch)</li> <li>Color Depth: 24-bit RGB</li> <li>Compression: PNG lossless compression</li> <li>Background: Solid white</li> <li>Size: Varies with dimensions (typically 50-500KB)</li> </ul>"},{"location":"user-guide/#output-considerations","title":"Output Considerations","text":""},{"location":"user-guide/#choosing-pdf-vs-png","title":"Choosing PDF vs PNG","text":"<ul> <li>PDF: For printing, exact dimensions, rotation needed</li> <li>PNG: For digital use, documentation, no rotation</li> <li>Both: Create both for complete documentation</li> </ul>"},{"location":"user-guide/#quality-settings","title":"Quality Settings","text":"<ul> <li>PDF: Vector-based, scales to any size</li> <li>PNG: 300 DPI raster, fixed resolution</li> <li>Print Quality: Both suitable for professional printing</li> </ul>"},{"location":"user-guide/#file-sizes","title":"File Sizes","text":"<ul> <li>PDF: Small file size, typically 1-5KB</li> <li>PNG: Larger file size, depends on dimensions and DPI</li> <li>Storage: PDF more efficient for archival</li> </ul>"},{"location":"user-guide/#tips-and-best-practices","title":"Tips and Best Practices","text":""},{"location":"user-guide/#design-guidelines","title":"Design Guidelines","text":""},{"location":"user-guide/#text-readability","title":"Text Readability","text":"<ul> <li>Use high contrast between text and background colors</li> <li>Choose appropriate font sizes (8-12pt typical)</li> <li>Avoid very long text in narrow segments</li> <li>Test readability at actual print size</li> <li>Consider viewing distance when choosing font size</li> </ul>"},{"location":"user-guide/#color-selection","title":"Color Selection","text":"<ul> <li>Black on White: Maximum readability</li> <li>White on Dark: Good for emphasis</li> <li>Color Coding: Use consistent colors for similar functions</li> <li>Print Considerations: Some colors may not print as expected</li> <li>Accessibility: Consider color-blind users</li> </ul>"},{"location":"user-guide/#dimensions","title":"Dimensions","text":"<ul> <li>Standard Heights: 5-12mm for most jackfield applications</li> <li>Content Width: 8-15mm depending on text length</li> <li>Total Width: Consider your paper size and rotation</li> <li>Precision: Use decimal places for exact measurements</li> <li>Practical Limits: Very small text may be unreadable</li> </ul>"},{"location":"user-guide/#workflow-optimization","title":"Workflow Optimization","text":""},{"location":"user-guide/#project-organization","title":"Project Organization","text":"<ul> <li>Save projects with descriptive names</li> <li>Use folders to organize related projects</li> <li>Include version numbers for iterative designs</li> <li>Document your color coding schemes</li> <li>Create templates for common layouts</li> </ul>"},{"location":"user-guide/#efficient-design-process","title":"Efficient Design Process","text":"<ol> <li>Start with dimensions and basic layout</li> <li>Add all text content first</li> <li>Apply formatting and colors</li> <li>Preview frequently during design</li> <li>Test print on draft paper before final output</li> </ol>"},{"location":"user-guide/#template-creation","title":"Template Creation","text":"<ul> <li>Create base projects for common layouts</li> <li>Save with standard dimensions and colors</li> <li>Use as starting points for new projects</li> <li>Share templates with team members</li> <li>Document template usage guidelines</li> </ul>"},{"location":"user-guide/#printing-tips","title":"Printing Tips","text":""},{"location":"user-guide/#paper-selection","title":"Paper Selection","text":"<ul> <li>Use high-quality paper for professional results</li> <li>Consider adhesive-backed paper for labels</li> <li>Test print settings with your specific printer</li> <li>Verify colors match your design intent</li> <li>Choose appropriate paper weight</li> </ul>"},{"location":"user-guide/#print-settings","title":"Print Settings","text":"<ul> <li>Use highest quality print settings</li> <li>Ensure \"Fit to Page\" is disabled</li> <li>Check that rotation is handled correctly</li> <li>Verify margins don't clip your design</li> <li>Test with draft prints first</li> </ul>"},{"location":"user-guide/#cutting-and-application","title":"Cutting and Application","text":"<ul> <li>Use a sharp blade for clean cuts</li> <li>Consider adding cut marks for guidance</li> <li>Test adhesion on your target surface</li> <li>Allow for slight misalignment in application</li> <li>Plan for environmental conditions</li> </ul>"},{"location":"user-guide/#color-management","title":"Color Management","text":""},{"location":"user-guide/#color-consistency","title":"Color Consistency","text":"<ul> <li>Use standard colors when possible</li> <li>Test print colors before final production</li> <li>Consider printer color profiles</li> <li>Document color choices for consistency</li> <li>Use color swatches for reference</li> </ul>"},{"location":"user-guide/#accessibility","title":"Accessibility","text":"<ul> <li>Ensure sufficient contrast ratios</li> <li>Test with color-blind simulation tools</li> <li>Provide alternative identification methods</li> <li>Consider monochrome printing compatibility</li> <li>Follow accessibility guidelines</li> </ul>"},{"location":"user-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/#common-issues","title":"Common Issues","text":""},{"location":"user-guide/#application-wont-start","title":"Application Won't Start","text":"<p>Problem: Application fails to launch</p> <p>Solutions:</p> <ul> <li>Verify Python 3.12+ is installed</li> <li>Check that PyQt6 is properly installed</li> <li>Run <code>uv run -m jackfield_labeler</code> from command line</li> <li>Check for error messages in terminal</li> <li>Verify UV is installed and working</li> </ul> <p>Diagnostic Steps:</p> <pre><code># Check Python version\npython --version\n\n# Check UV installation\nuv --version\n\n# Try running directly\nuv run -m jackfield_labeler\n\n# Check dependencies\nuv pip list\n</code></pre>"},{"location":"user-guide/#pdf-generation-fails","title":"PDF Generation Fails","text":"<p>Problem: PDF export produces errors</p> <p>Solutions:</p> <ul> <li>Verify all text fields are valid</li> <li>Check that strip dimensions are reasonable</li> <li>Ensure output directory is writable</li> <li>Try a different file name/location</li> <li>Check available disk space</li> </ul> <p>Common Causes:</p> <ul> <li>Invalid characters in filename</li> <li>Insufficient permissions</li> <li>Very large strip dimensions</li> <li>Corrupted project data</li> </ul>"},{"location":"user-guide/#preview-not-updating","title":"Preview Not Updating","text":"<p>Problem: Preview tab doesn't show changes</p> <p>Solutions:</p> <ul> <li>Switch to another tab and back</li> <li>Check that segments have valid dimensions</li> <li>Verify text and colors are properly set</li> <li>Restart the application if needed</li> <li>Check for error messages</li> </ul> <p>Diagnostic Steps:</p> <ol> <li>Verify strip has content</li> <li>Check total width calculation</li> <li>Look for validation errors</li> <li>Try creating new project</li> </ol>"},{"location":"user-guide/#colors-look-wrong","title":"Colors Look Wrong","text":"<p>Problem: Colors in output don't match preview</p> <p>Solutions:</p> <ul> <li>Check your printer's color settings</li> <li>Verify monitor calibration</li> <li>Test with different paper types</li> <li>Use standard colors for consistency</li> <li>Compare with color references</li> </ul> <p>Color Troubleshooting:</p> <ul> <li>Print color test page</li> <li>Check printer driver settings</li> <li>Verify paper type selection</li> <li>Consider color management profiles</li> </ul>"},{"location":"user-guide/#file-wont-open","title":"File Won't Open","text":"<p>Problem: Project file fails to load</p> <p>Solutions:</p> <ul> <li>Verify file is a valid <code>.jlp</code> file</li> <li>Check file permissions</li> <li>Try opening in a text editor to verify JSON format</li> <li>Create a new project and recreate the design</li> <li>Check file size and corruption</li> </ul> <p>File Validation:</p> <pre><code># Check file format\nfile project.jlp\n\n# Validate JSON\npython -m json.tool project.jlp\n</code></pre>"},{"location":"user-guide/#performance-issues","title":"Performance Issues","text":""},{"location":"user-guide/#slow-preview-updates","title":"Slow Preview Updates","text":"<p>Problem: Preview takes time to update</p> <p>Solutions:</p> <ul> <li>Reduce the number of segments</li> <li>Use shorter text strings</li> <li>Close other applications to free memory</li> <li>Restart the application</li> <li>Check system resources</li> </ul> <p>Performance Tips:</p> <ul> <li>Keep segment count reasonable (&lt;50)</li> <li>Avoid very long text strings</li> <li>Close unused applications</li> <li>Ensure adequate RAM</li> </ul>"},{"location":"user-guide/#large-file-sizes","title":"Large File Sizes","text":"<p>Problem: Project files are unexpectedly large</p> <p>Solutions:</p> <ul> <li>Check for very long text strings</li> <li>Verify reasonable number of segments</li> <li>Save and reload the project</li> <li>Contact support if issue persists</li> </ul> <p>File Size Guidelines:</p> <ul> <li>Normal projects: &lt;10KB</li> <li>Large projects: &lt;100KB</li> <li>Excessive size: &gt;1MB (investigate)</li> </ul>"},{"location":"user-guide/#advanced-troubleshooting","title":"Advanced Troubleshooting","text":""},{"location":"user-guide/#command-line-debugging","title":"Command Line Debugging","text":"<p>Run the application from command line to see detailed error messages:</p> <pre><code># Run with debug output\nuv run -m jackfield_labeler\n\n# Check for Python errors\npython -c \"import jackfield_labeler; print('Import OK')\"\n\n# Verify PyQt6\npython -c \"from PyQt6.QtWidgets import QApplication; print('PyQt6 OK')\"\n</code></pre>"},{"location":"user-guide/#log-files","title":"Log Files","text":"<p>Check for log files in your system's temporary directory:</p> <ul> <li>Windows: <code>%TEMP%\\jackfield_labeler\\</code></li> <li>macOS: <code>/tmp/jackfield_labeler/</code></li> <li>Linux: <code>/tmp/jackfield_labeler/</code></li> </ul>"},{"location":"user-guide/#reset-settings","title":"Reset Settings","text":"<p>If settings become corrupted:</p> <ol> <li>Close the application</li> <li>Delete settings files (location varies by OS)</li> <li>Restart the application</li> <li>Reconfigure your preferences</li> </ol>"},{"location":"user-guide/#reinstallation","title":"Reinstallation","text":"<p>If problems persist:</p> <ol> <li>Uninstall the application</li> <li>Remove any remaining files</li> <li>Reinstall using the latest version</li> <li>Test with a simple project first</li> </ol>"},{"location":"user-guide/#getting-help","title":"Getting Help","text":""},{"location":"user-guide/#documentation","title":"Documentation","text":"<ul> <li>Read this user guide thoroughly</li> <li>Check the README.md for installation help</li> <li>Review the architecture documentation for technical details</li> <li>Consult the API reference for development</li> </ul>"},{"location":"user-guide/#community-support","title":"Community Support","text":"<ul> <li>Check GitHub issues for known problems</li> <li>Search for similar issues before reporting new ones</li> <li>Provide detailed information when reporting bugs</li> <li>Include sample project files when relevant</li> </ul>"},{"location":"user-guide/#reporting-issues","title":"Reporting Issues","text":"<p>When reporting problems, include:</p> <ul> <li>Operating system and version</li> <li>Python version</li> <li>Application version</li> <li>Steps to reproduce the issue</li> <li>Error messages (if any)</li> <li>Sample project file (if relevant)</li> <li>Screenshots of the problem</li> </ul> <p>Issue Template:</p> <pre><code>**Environment:**\n- OS: [Windows 10/macOS 12/Ubuntu 20.04]\n- Python: [3.12.0]\n- Application: [0.0.1]\n\n**Problem:**\n[Describe the issue]\n\n**Steps to Reproduce:**\n1. [First step]\n2. [Second step]\n3. [Third step]\n\n**Expected Behavior:**\n[What should happen]\n\n**Actual Behavior:**\n[What actually happens]\n\n**Additional Information:**\n[Any other relevant details]\n</code></pre> <p>This comprehensive user guide should help you make the most of the Jackfield Labeler application. For additional support or feature requests, please visit the project's GitHub repository.</p>"}]}